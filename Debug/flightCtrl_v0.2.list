
flightCtrl_v0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000282c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080029b0  080029b0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b0  080029b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080029d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000068  08002a38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002a38  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c7f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194d  00000000  00000000  00024d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00026660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00026d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b9b  00000000  00000000  000272f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049e5  00000000  00000000  00039e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d63f  00000000  00000000  0003e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009beb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  0009bf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002920 	.word	0x08002920

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002920 	.word	0x08002920

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_d2uiz>:
 800062c:	004a      	lsls	r2, r1, #1
 800062e:	d211      	bcs.n	8000654 <__aeabi_d2uiz+0x28>
 8000630:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000634:	d211      	bcs.n	800065a <__aeabi_d2uiz+0x2e>
 8000636:	d50d      	bpl.n	8000654 <__aeabi_d2uiz+0x28>
 8000638:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800063c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000640:	d40e      	bmi.n	8000660 <__aeabi_d2uiz+0x34>
 8000642:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	4770      	bx	lr
 8000654:	f04f 0000 	mov.w	r0, #0
 8000658:	4770      	bx	lr
 800065a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065e:	d102      	bne.n	8000666 <__aeabi_d2uiz+0x3a>
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000664:	4770      	bx	lr
 8000666:	f04f 0000 	mov.w	r0, #0
 800066a:	4770      	bx	lr

0800066c <__aeabi_frsub>:
 800066c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000670:	e002      	b.n	8000678 <__addsf3>
 8000672:	bf00      	nop

08000674 <__aeabi_fsub>:
 8000674:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000678 <__addsf3>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	bf1f      	itttt	ne
 800067c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000680:	ea92 0f03 	teqne	r2, r3
 8000684:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000688:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800068c:	d06a      	beq.n	8000764 <__addsf3+0xec>
 800068e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000692:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000696:	bfc1      	itttt	gt
 8000698:	18d2      	addgt	r2, r2, r3
 800069a:	4041      	eorgt	r1, r0
 800069c:	4048      	eorgt	r0, r1
 800069e:	4041      	eorgt	r1, r0
 80006a0:	bfb8      	it	lt
 80006a2:	425b      	neglt	r3, r3
 80006a4:	2b19      	cmp	r3, #25
 80006a6:	bf88      	it	hi
 80006a8:	4770      	bxhi	lr
 80006aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b6:	bf18      	it	ne
 80006b8:	4240      	negne	r0, r0
 80006ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c6:	bf18      	it	ne
 80006c8:	4249      	negne	r1, r1
 80006ca:	ea92 0f03 	teq	r2, r3
 80006ce:	d03f      	beq.n	8000750 <__addsf3+0xd8>
 80006d0:	f1a2 0201 	sub.w	r2, r2, #1
 80006d4:	fa41 fc03 	asr.w	ip, r1, r3
 80006d8:	eb10 000c 	adds.w	r0, r0, ip
 80006dc:	f1c3 0320 	rsb	r3, r3, #32
 80006e0:	fa01 f103 	lsl.w	r1, r1, r3
 80006e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e8:	d502      	bpl.n	80006f0 <__addsf3+0x78>
 80006ea:	4249      	negs	r1, r1
 80006ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f4:	d313      	bcc.n	800071e <__addsf3+0xa6>
 80006f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fa:	d306      	bcc.n	800070a <__addsf3+0x92>
 80006fc:	0840      	lsrs	r0, r0, #1
 80006fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000702:	f102 0201 	add.w	r2, r2, #1
 8000706:	2afe      	cmp	r2, #254	; 0xfe
 8000708:	d251      	bcs.n	80007ae <__addsf3+0x136>
 800070a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000712:	bf08      	it	eq
 8000714:	f020 0001 	biceq.w	r0, r0, #1
 8000718:	ea40 0003 	orr.w	r0, r0, r3
 800071c:	4770      	bx	lr
 800071e:	0049      	lsls	r1, r1, #1
 8000720:	eb40 0000 	adc.w	r0, r0, r0
 8000724:	3a01      	subs	r2, #1
 8000726:	bf28      	it	cs
 8000728:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800072c:	d2ed      	bcs.n	800070a <__addsf3+0x92>
 800072e:	fab0 fc80 	clz	ip, r0
 8000732:	f1ac 0c08 	sub.w	ip, ip, #8
 8000736:	ebb2 020c 	subs.w	r2, r2, ip
 800073a:	fa00 f00c 	lsl.w	r0, r0, ip
 800073e:	bfaa      	itet	ge
 8000740:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000744:	4252      	neglt	r2, r2
 8000746:	4318      	orrge	r0, r3
 8000748:	bfbc      	itt	lt
 800074a:	40d0      	lsrlt	r0, r2
 800074c:	4318      	orrlt	r0, r3
 800074e:	4770      	bx	lr
 8000750:	f092 0f00 	teq	r2, #0
 8000754:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000758:	bf06      	itte	eq
 800075a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075e:	3201      	addeq	r2, #1
 8000760:	3b01      	subne	r3, #1
 8000762:	e7b5      	b.n	80006d0 <__addsf3+0x58>
 8000764:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000768:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800076c:	bf18      	it	ne
 800076e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000772:	d021      	beq.n	80007b8 <__addsf3+0x140>
 8000774:	ea92 0f03 	teq	r2, r3
 8000778:	d004      	beq.n	8000784 <__addsf3+0x10c>
 800077a:	f092 0f00 	teq	r2, #0
 800077e:	bf08      	it	eq
 8000780:	4608      	moveq	r0, r1
 8000782:	4770      	bx	lr
 8000784:	ea90 0f01 	teq	r0, r1
 8000788:	bf1c      	itt	ne
 800078a:	2000      	movne	r0, #0
 800078c:	4770      	bxne	lr
 800078e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000792:	d104      	bne.n	800079e <__addsf3+0x126>
 8000794:	0040      	lsls	r0, r0, #1
 8000796:	bf28      	it	cs
 8000798:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800079c:	4770      	bx	lr
 800079e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007a2:	bf3c      	itt	cc
 80007a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a8:	4770      	bxcc	lr
 80007aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b6:	4770      	bx	lr
 80007b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007bc:	bf16      	itet	ne
 80007be:	4608      	movne	r0, r1
 80007c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c4:	4601      	movne	r1, r0
 80007c6:	0242      	lsls	r2, r0, #9
 80007c8:	bf06      	itte	eq
 80007ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ce:	ea90 0f01 	teqeq	r0, r1
 80007d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_ui2f>:
 80007d8:	f04f 0300 	mov.w	r3, #0
 80007dc:	e004      	b.n	80007e8 <__aeabi_i2f+0x8>
 80007de:	bf00      	nop

080007e0 <__aeabi_i2f>:
 80007e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e4:	bf48      	it	mi
 80007e6:	4240      	negmi	r0, r0
 80007e8:	ea5f 0c00 	movs.w	ip, r0
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f4:	4601      	mov	r1, r0
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	e01c      	b.n	8000836 <__aeabi_l2f+0x2a>

080007fc <__aeabi_ul2f>:
 80007fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000800:	bf08      	it	eq
 8000802:	4770      	bxeq	lr
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e00a      	b.n	8000820 <__aeabi_l2f+0x14>
 800080a:	bf00      	nop

0800080c <__aeabi_l2f>:
 800080c:	ea50 0201 	orrs.w	r2, r0, r1
 8000810:	bf08      	it	eq
 8000812:	4770      	bxeq	lr
 8000814:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000818:	d502      	bpl.n	8000820 <__aeabi_l2f+0x14>
 800081a:	4240      	negs	r0, r0
 800081c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000820:	ea5f 0c01 	movs.w	ip, r1
 8000824:	bf02      	ittt	eq
 8000826:	4684      	moveq	ip, r0
 8000828:	4601      	moveq	r1, r0
 800082a:	2000      	moveq	r0, #0
 800082c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000830:	bf08      	it	eq
 8000832:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000836:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800083a:	fabc f28c 	clz	r2, ip
 800083e:	3a08      	subs	r2, #8
 8000840:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000844:	db10      	blt.n	8000868 <__aeabi_l2f+0x5c>
 8000846:	fa01 fc02 	lsl.w	ip, r1, r2
 800084a:	4463      	add	r3, ip
 800084c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000850:	f1c2 0220 	rsb	r2, r2, #32
 8000854:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000858:	fa20 f202 	lsr.w	r2, r0, r2
 800085c:	eb43 0002 	adc.w	r0, r3, r2
 8000860:	bf08      	it	eq
 8000862:	f020 0001 	biceq.w	r0, r0, #1
 8000866:	4770      	bx	lr
 8000868:	f102 0220 	add.w	r2, r2, #32
 800086c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000870:	f1c2 0220 	rsb	r2, r2, #32
 8000874:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000878:	fa21 f202 	lsr.w	r2, r1, r2
 800087c:	eb43 0002 	adc.w	r0, r3, r2
 8000880:	bf08      	it	eq
 8000882:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000886:	4770      	bx	lr

08000888 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	699a      	ldr	r2, [r3, #24]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80008bc:	2020      	movs	r0, #32
 80008be:	f7ff ffe3 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f7ff ffe0 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f7ff ffdd 	bl	8000888 <LL_APB2_GRP1_EnableClock>

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	60d3      	str	r3, [r2, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	2201      	movs	r2, #1
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	401a      	ands	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d2:	2101      	movs	r1, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	1e59      	subs	r1, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
         );
 80009e0:	4313      	orrs	r3, r2
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a10:	f7ff ff92 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <LL_RCC_HSE_Enable+0x18>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <LL_RCC_HSE_Enable+0x18>)
 8000a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000

08000a4c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <LL_RCC_HSE_IsReady+0x20>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_RCC_SetSysClkSource+0x24>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f023 0203 	bic.w	r2, r3, #3
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <LL_RCC_SetSysClkSource+0x24>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	604b      	str	r3, [r1, #4]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <LL_RCC_GetSysClkSource+0x14>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ac0:	4904      	ldr	r1, [pc, #16]	; (8000ad4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	604b      	str	r3, [r1, #4]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	604b      	str	r3, [r1, #4]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <LL_RCC_PLL_Enable+0x18>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <LL_RCC_PLL_Enable+0x18>)
 8000b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000

08000b44 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <LL_RCC_PLL_IsReady+0x20>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b54:	bf0c      	ite	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	2300      	movne	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000

08000b68 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	430b      	orrs	r3, r1
 8000b84:	4903      	ldr	r1, [pc, #12]	; (8000b94 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <LL_APB1_GRP1_EnableClock>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bae:	69da      	ldr	r2, [r3, #28]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <LL_APB2_GRP1_EnableClock>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd2:	699a      	ldr	r2, [r3, #24]
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bde:	699a      	ldr	r2, [r3, #24]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4013      	ands	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_FLASH_SetLatency+0x24>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 0207 	bic.w	r2, r3, #7
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_FLASH_SetLatency+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <LL_FLASH_GetLatency+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0307 	and.w	r3, r3, #7
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40022000 	.word	0x40022000

08000c38 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4a:	6053      	str	r3, [r2, #4]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40010000 	.word	0x40010000

08000c58 <_ZN7GlobalsC1Ev>:
#ifndef SRC_GLOBALS_H_
#define SRC_GLOBALS_H_

#include "sbus.h"

class Globals {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f903 	bl	8000e7c <_ZN3def4SbusC1Ev>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ff9f 	bl	8000bc8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c8e:	f7ff ff83 	bl	8000b98 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f7ff fe1e 	bl	80008d4 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000c98:	f7ff fe40 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fe72 	bl	800098c <NVIC_EncodePriority>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f7ff fe42 	bl	8000938 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000cb4:	f7ff ffc0 	bl	8000c38 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f814 	bl	8000ce4 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  SystemCoreClockUpdate();
 8000cbc:	f000 fe12 	bl	80018e4 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <main+0x5c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <main+0x60>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	099b      	lsrs	r3, r3, #6
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fe8d 	bl	80009ec <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f7ff fdf1 	bl	80008b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cd6:	f001 f909 	bl	8001eec <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0x5a>
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	10624dd3 	.word	0x10624dd3

08000ce4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff85 	bl	8000bf8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000cee:	f7ff ff97 	bl	8000c20 <LL_FLASH_GetLatency>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	bf14      	ite	ne
 8000cf8:	2301      	movne	r3, #1
 8000cfa:	2300      	moveq	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d000      	beq.n	8000d04 <_Z18SystemClock_Configv+0x20>
 8000d02:	e7f4      	b.n	8000cee <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_RCC_HSE_Enable();
 8000d04:	f7ff fe94 	bl	8000a30 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d08:	f7ff fea0 	bl	8000a4c <LL_RCC_HSE_IsReady>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d000      	beq.n	8000d1e <_Z18SystemClock_Configv+0x3a>
 8000d1c:	e7f4      	b.n	8000d08 <_Z18SystemClock_Configv+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000d1e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000d22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d26:	f7ff ff1f 	bl	8000b68 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d2a:	f7ff fefd 	bl	8000b28 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d2e:	f7ff ff09 	bl	8000b44 <LL_RCC_PLL_IsReady>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	bf14      	ite	ne
 8000d38:	2301      	movne	r3, #1
 8000d3a:	2300      	moveq	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d000      	beq.n	8000d44 <_Z18SystemClock_Configv+0x60>
 8000d42:	e7f4      	b.n	8000d2e <_Z18SystemClock_Configv+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff feb3 	bl	8000ab0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000d4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d4e:	f7ff fec3 	bl	8000ad8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fed4 	bl	8000b00 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fe89 	bl	8000a70 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d5e:	f7ff fe9b 	bl	8000a98 <LL_RCC_GetSysClkSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d000      	beq.n	8000d74 <_Z18SystemClock_Configv+0x90>
 8000d72:	e7f4      	b.n	8000d5e <_Z18SystemClock_Configv+0x7a>
  {

  }
  LL_Init1msTick(72000000);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <_Z18SystemClock_Configv+0xa0>)
 8000d76:	f001 fd31 	bl	80027dc <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8000d7a:	4802      	ldr	r0, [pc, #8]	; (8000d84 <_Z18SystemClock_Configv+0xa0>)
 8000d7c:	f001 fd3c 	bl	80027f8 <LL_SetSystemCoreClock>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	044aa200 	.word	0x044aa200

08000d88 <IncrementSystemTick_Callback>:

/* USER CODE BEGIN 4 */

void IncrementSystemTick_Callback(void){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	G.millis++;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <IncrementSystemTick_Callback+0x18>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <IncrementSystemTick_Callback+0x18>)
 8000d94:	6053      	str	r3, [r2, #4]
	__NOP();
 8000d96:	bf00      	nop
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000084 	.word	0x20000084

08000da4 <_ZN7GlobalsD1Ev>:
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3308      	adds	r3, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f89f 	bl	8000ef4 <_ZN3def4SbusD1Ev>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_Z41__static_initialization_and_destruction_0ii>:
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d115      	bne.n	8000dfc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d110      	bne.n	8000dfc <_Z41__static_initialization_and_destruction_0ii+0x3c>


};


inline Globals G;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000df8:	f7ff ff2e 	bl	8000c58 <_ZN7GlobalsC1Ev>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d115      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d110      	bne.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000e2a:	f7ff ffbb 	bl	8000da4 <_ZN7GlobalsD1Ev>
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000f8 	.word	0x200000f8
 8000e3c:	20000084 	.word	0x20000084

08000e40 <_GLOBAL__sub_I_lastTicks>:
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff ffb9 	bl	8000dc0 <_Z41__static_initialization_and_destruction_0ii>
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_GLOBAL__sub_D_lastTicks>:
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ffb1 	bl	8000dc0 <_Z41__static_initialization_and_destruction_0ii>
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_ZN3def3def7ChannelaSERKj>:
			const unsigned int operator() ()
			{
				return value;
			}

			void operator=( const unsigned int& val )
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
			{
				value = val;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
			}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <_ZN3def4SbusC1Ev>:

#include <sbus.h>

using namespace def;

Sbus::Sbus() {
 8000e7c:	b4b0      	push	{r4, r5, r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <_ZN3def4SbusC1Ev+0x70>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	711a      	strb	r2, [r3, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	715a      	strb	r2, [r3, #5]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	719a      	strb	r2, [r3, #6]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	71da      	strb	r2, [r3, #7]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	330c      	adds	r3, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	761a      	strb	r2, [r3, #24]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <_ZN3def4SbusC1Ev+0x74>)
 8000ec6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000eca:	4615      	mov	r5, r2
 8000ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// TODO Auto-generated constructor stub

}
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bcb0      	pop	{r4, r5, r7}
 8000eea:	4770      	bx	lr
 8000eec:	08002980 	.word	0x08002980
 8000ef0:	08002938 	.word	0x08002938

08000ef4 <_ZN3def4SbusD1Ev>:

Sbus::~Sbus() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <_ZN3def4SbusD1Ev+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	08002980 	.word	0x08002980

08000f14 <_ZN3def4SbusD0Ev>:
Sbus::~Sbus() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
}
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffe9 	bl	8000ef4 <_ZN3def4SbusD1Ev>
 8000f22:	216c      	movs	r1, #108	; 0x6c
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f001 fc75 	bl	8002814 <_ZdlPvj>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN3def4Sbus8sbus2pwmERKj>:


const unsigned int Sbus::sbus2pwm( const unsigned int& sbus )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	const float a = 894.384;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_ZN3def4Sbus8sbus2pwmERKj+0x58>)
 8000f40:	60fb      	str	r3, [r7, #12]
	const float b = 0.610501;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_ZN3def4Sbus8sbus2pwmERKj+0x5c>)
 8000f44:	60bb      	str	r3, [r7, #8]

	// extra term is for proper rounding
	// otherwise it gets rounded down always
	return static_cast<unsigned int>( a + b*sbus + (0.5-(sbus<0)) );
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fc44 	bl	80007d8 <__aeabi_ui2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	490f      	ldr	r1, [pc, #60]	; (8000f90 <_ZN3def4Sbus8sbus2pwmERKj+0x5c>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f8f9 	bl	800014c <__aeabi_fmul>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	490b      	ldr	r1, [pc, #44]	; (8000f8c <_ZN3def4Sbus8sbus2pwmERKj+0x58>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fb8a 	bl	8000678 <__addsf3>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fb08 	bl	800057c <__aeabi_f2d>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_ZN3def4Sbus8sbus2pwmERKj+0x60>)
 8000f72:	f7ff f9a5 	bl	80002c0 <__adddf3>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fb55 	bl	800062c <__aeabi_d2uiz>
 8000f82:	4603      	mov	r3, r0

}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	445f9893 	.word	0x445f9893
 8000f90:	3f1c49cb 	.word	0x3f1c49cb
 8000f94:	3fe00000 	.word	0x3fe00000

08000f98 <_ZN3def4Sbus14decodeChannelsEv>:

void Sbus::decodeChannels(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0a6      	sub	sp, #152	; 0x98
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	//if ((buffer[23] >> 2) & 0x0001) {
	//	lost++;
	//	return false;
	//}

	Channel[0]  = sbus2pwm((buffer[1]    |buffer[2]<<8)                 & 0x07FF);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7b5b      	ldrb	r3, [r3, #13]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7b9b      	ldrb	r3, [r3, #14]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	4313      	orrs	r3, r2
 8000fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffba 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	332c      	adds	r3, #44	; 0x2c
 8000fc8:	f107 0208 	add.w	r2, r7, #8
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff46 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[1]  = sbus2pwm((buffer[2]>>3 |buffer[3]<<5)                 & 0x07FF);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b9b      	ldrb	r3, [r3, #14]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7bdb      	ldrb	r3, [r3, #15]
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff9e 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3330      	adds	r3, #48	; 0x30
 8001000:	f107 0210 	add.w	r2, r7, #16
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff2a 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[2]  = sbus2pwm((buffer[3]>>6 |buffer[4]<<2 |buffer[5]<<10)  & 0x07FF);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7bdb      	ldrb	r3, [r3, #15]
 8001010:	099b      	lsrs	r3, r3, #6
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7c1b      	ldrb	r3, [r3, #16]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7c5b      	ldrb	r3, [r3, #17]
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4313      	orrs	r3, r2
 8001026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff7e 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001038:	4603      	mov	r3, r0
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3334      	adds	r3, #52	; 0x34
 8001040:	f107 0218 	add.w	r2, r7, #24
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff0a 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[3]  = sbus2pwm((buffer[5]>>1 |buffer[6]<<7)                 & 0x07FF);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7c5b      	ldrb	r3, [r3, #17]
 8001050:	085b      	lsrs	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7c9b      	ldrb	r3, [r3, #18]
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	4313      	orrs	r3, r2
 800105e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff62 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001070:	4603      	mov	r3, r0
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3338      	adds	r3, #56	; 0x38
 8001078:	f107 0220 	add.w	r2, r7, #32
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff feee 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[4]  = sbus2pwm((buffer[6]>>4 |buffer[7]<<4)                 & 0x07FF);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7c9b      	ldrb	r3, [r3, #18]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7cdb      	ldrb	r3, [r3, #19]
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4313      	orrs	r3, r2
 8001096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff46 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 80010a8:	4603      	mov	r3, r0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	333c      	adds	r3, #60	; 0x3c
 80010b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fed2 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[5]  = sbus2pwm((buffer[7]>>7 |buffer[8]<<1 |buffer[9]<<9)   & 0x07FF);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	09db      	lsrs	r3, r3, #7
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7d1b      	ldrb	r3, [r3, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7d5b      	ldrb	r3, [r3, #21]
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	4313      	orrs	r3, r2
 80010d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
 80010dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff26 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 80010e8:	4603      	mov	r3, r0
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3340      	adds	r3, #64	; 0x40
 80010f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff feb2 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[6]  = sbus2pwm((buffer[9]>>2 |buffer[10]<<6)                & 0x07FF);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7d5b      	ldrb	r3, [r3, #21]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7d9b      	ldrb	r3, [r3, #22]
 800110a:	019b      	lsls	r3, r3, #6
 800110c:	4313      	orrs	r3, r2
 800110e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001114:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff0a 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001120:	4603      	mov	r3, r0
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3344      	adds	r3, #68	; 0x44
 8001128:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe96 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[7]  = sbus2pwm((buffer[10]>>5|buffer[11]<<3)                & 0x07FF);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7d9b      	ldrb	r3, [r3, #22]
 8001138:	095b      	lsrs	r3, r3, #5
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7ddb      	ldrb	r3, [r3, #23]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4313      	orrs	r3, r2
 8001146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
 800114c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001150:	4619      	mov	r1, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff feee 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001158:	4603      	mov	r3, r0
 800115a:	643b      	str	r3, [r7, #64]	; 0x40
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3348      	adds	r3, #72	; 0x48
 8001160:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe7a 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[8]  = sbus2pwm((buffer[12]   |buffer[13]<<8)                & 0x07FF);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e1b      	ldrb	r3, [r3, #24]
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7e5b      	ldrb	r3, [r3, #25]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4313      	orrs	r3, r2
 800117a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001180:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fed4 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 800118c:	4603      	mov	r3, r0
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	334c      	adds	r3, #76	; 0x4c
 8001194:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe60 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[9]  = sbus2pwm((buffer[13]>>3|buffer[14]<<5)                & 0x07FF);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e5b      	ldrb	r3, [r3, #25]
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7e9b      	ldrb	r3, [r3, #26]
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	4313      	orrs	r3, r2
 80011b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
 80011b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff feb8 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 80011c4:	4603      	mov	r3, r0
 80011c6:	653b      	str	r3, [r7, #80]	; 0x50
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3350      	adds	r3, #80	; 0x50
 80011cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe44 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[10] = sbus2pwm((buffer[14]>>6|buffer[15]<<2|buffer[16]<<10) & 0x07FF);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e9b      	ldrb	r3, [r3, #26]
 80011dc:	099b      	lsrs	r3, r3, #6
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7edb      	ldrb	r3, [r3, #27]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7f1b      	ldrb	r3, [r3, #28]
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4313      	orrs	r3, r2
 80011f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fe98 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001204:	4603      	mov	r3, r0
 8001206:	65bb      	str	r3, [r7, #88]	; 0x58
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3354      	adds	r3, #84	; 0x54
 800120c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe24 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[11] = sbus2pwm((buffer[16]>>1|buffer[17]<<7)                & 0x07FF);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7f1b      	ldrb	r3, [r3, #28]
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7f5b      	ldrb	r3, [r3, #29]
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4313      	orrs	r3, r2
 800122a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800122e:	667b      	str	r3, [r7, #100]	; 0x64
 8001230:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fe7c 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 800123c:	4603      	mov	r3, r0
 800123e:	663b      	str	r3, [r7, #96]	; 0x60
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3358      	adds	r3, #88	; 0x58
 8001244:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe08 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[12] = sbus2pwm((buffer[17]>>4|buffer[18]<<4)                & 0x07FF);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f5b      	ldrb	r3, [r3, #29]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7f9b      	ldrb	r3, [r3, #30]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4313      	orrs	r3, r2
 8001262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001268:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fe60 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001274:	4603      	mov	r3, r0
 8001276:	66bb      	str	r3, [r7, #104]	; 0x68
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	335c      	adds	r3, #92	; 0x5c
 800127c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fdec 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[13] = sbus2pwm((buffer[18]>>7|buffer[19]<<1|buffer[20]<<9)  & 0x07FF);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7f9b      	ldrb	r3, [r3, #30]
 800128c:	09db      	lsrs	r3, r3, #7
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7fdb      	ldrb	r3, [r3, #31]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	4313      	orrs	r3, r2
 80012a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a8:	677b      	str	r3, [r7, #116]	; 0x74
 80012aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fe3f 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 80012b6:	4603      	mov	r3, r0
 80012b8:	673b      	str	r3, [r7, #112]	; 0x70
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fdcb 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[14] = sbus2pwm((buffer[20]>>2|buffer[21]<<6)                & 0x07FF);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	4313      	orrs	r3, r2
 80012e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fe21 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 80012f2:	4603      	mov	r3, r0
 80012f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3364      	adds	r3, #100	; 0x64
 80012fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fdad 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	Channel[15] = sbus2pwm((buffer[21]>>5|buffer[22]<<3)                & 0x07FF);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	b2db      	uxtb	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4313      	orrs	r3, r2
 800131c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001324:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe02 	bl	8000f34 <_ZN3def4Sbus8sbus2pwmERKj>
 8001330:	4603      	mov	r3, r0
 8001332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3368      	adds	r3, #104	; 0x68
 800133a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fd8d 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>

	( (buffer[23])      & 0x0001) ? Channel[16] = 2047: Channel[16] = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <_ZN3def4Sbus14decodeChannelsEv+0x3d6>
 8001354:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	336c      	adds	r3, #108	; 0x6c
 8001360:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fd7a 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
 800136c:	e00a      	b.n	8001384 <_ZN3def4Sbus14decodeChannelsEv+0x3ec>
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	336c      	adds	r3, #108	; 0x6c
 8001378:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fd6e 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
	( (buffer[23] >> 1) & 0x0001) ? Channel[17] = 2047: Channel[17] = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <_ZN3def4Sbus14decodeChannelsEv+0x418>
 8001396:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800139a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3370      	adds	r3, #112	; 0x70
 80013a2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fd59 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>
 80013ae:	e00a      	b.n	80013c6 <_ZN3def4Sbus14decodeChannelsEv+0x42e>
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3370      	adds	r3, #112	; 0x70
 80013ba:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd4d 	bl	8000e60 <_ZN3def3def7ChannelaSERKj>

	if ((buffer[23] >> 3) & 0x0001) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <_ZN3def4Sbus14decodeChannelsEv+0x448>
		failsafe = true;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	71da      	strb	r2, [r3, #7]
	} else {
		failsafe = false;
	}

}
 80013de:	e002      	b.n	80013e6 <_ZN3def4Sbus14decodeChannelsEv+0x44e>
		failsafe = false;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	71da      	strb	r2, [r3, #7]
}
 80013e6:	bf00      	nop
 80013e8:	3798      	adds	r7, #152	; 0x98
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_ZN3def4Sbus13readSbusFrameEv>:

void Sbus::readSbusFrame()
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	if ( buffer[0] == START_BYTE && buffer[SBUS_FRAME_LEN-1] == END_BYTE ) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b1b      	ldrb	r3, [r3, #12]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d10b      	bne.n	8001416 <_ZN3def4Sbus13readSbusFrameEv+0x28>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <_ZN3def4Sbus13readSbusFrameEv+0x28>
		decodeChannels();
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fdc5 	bl	8000f98 <_ZN3def4Sbus14decodeChannelsEv>
		synced=true;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	719a      	strb	r2, [r3, #6]
 8001414:	e008      	b.n	8001428 <_ZN3def4Sbus13readSbusFrameEv+0x3a>
	} else {
		synced=false;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	719a      	strb	r2, [r3, #6]
		lost++;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	609a      	str	r2, [r3, #8]
	}

}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN3def4Sbus8findSyncERKh>:

void Sbus::findSync( const unsigned char& byte )
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	if ( !reading && byte == START_BYTE ) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	f083 0301 	eor.w	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d009      	beq.n	800145c <_ZN3def4Sbus8findSyncERKh+0x2c>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d105      	bne.n	800145c <_ZN3def4Sbus8findSyncERKh+0x2c>
		reading=true;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	715a      	strb	r2, [r3, #5]
		i_buf=0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	711a      	strb	r2, [r3, #4]
	}

	if ( reading ){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	795b      	ldrb	r3, [r3, #5]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <_ZN3def4Sbus8findSyncERKh+0x5c>


		if ( byte == END_BYTE && i_buf == SBUS_FRAME_LEN - 1 ) {
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <_ZN3def4Sbus8findSyncERKh+0x50>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	2b18      	cmp	r3, #24
 8001472:	d105      	bne.n	8001480 <_ZN3def4Sbus8findSyncERKh+0x50>
			synced=true;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	719a      	strb	r2, [r3, #6]
			reading=false;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	715a      	strb	r2, [r3, #5]
		}

		i_buf++;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	711a      	strb	r2, [r3, #4]
	}
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <_ZN3def4Sbus8isSyncedEv>:


const bool Sbus::isSynced()
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return synced;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	799b      	ldrb	r3, [r3, #6]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <LL_DMA_EnableChannel+0x38>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	3a01      	subs	r2, #1
 80014ca:	4906      	ldr	r1, [pc, #24]	; (80014e4 <LL_DMA_EnableChannel+0x38>)
 80014cc:	5c8a      	ldrb	r2, [r1, r2]
 80014ce:	4611      	mov	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	440a      	add	r2, r1
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	08002988 	.word	0x08002988

080014e8 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LL_DMA_DisableChannel+0x38>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	3a01      	subs	r2, #1
 8001506:	4906      	ldr	r1, [pc, #24]	; (8001520 <LL_DMA_DisableChannel+0x38>)
 8001508:	5c8a      	ldrb	r2, [r1, r2]
 800150a:	4611      	mov	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	440a      	add	r2, r1
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	08002988 	.word	0x08002988

08001524 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <LL_DMA_IsActiveFlag_TE5>:
  * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157e:	605a      	str	r2, [r3, #4]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
	...

0800158c <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <LL_DMA_IsEnabledIT_TC+0x34>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE));
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	08002988 	.word	0x08002988

080015c4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f06f 0220 	mvn.w	r2, #32
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001602:	b480      	push	{r7}
 8001604:	b089      	sub	sp, #36	; 0x24
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330c      	adds	r3, #12
 800160e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	e853 3f00 	ldrex	r3, [r3]
 8001616:	60bb      	str	r3, [r7, #8]
   return(result);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	330c      	adds	r3, #12
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	61ba      	str	r2, [r7, #24]
 8001628:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	e841 2300 	strex	r3, r2, [r1]
 8001632:	613b      	str	r3, [r7, #16]
   return(result);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d000      	beq.n	8001646 <LL_USART_EnableIT_RXNE+0x44>
 8001644:	e7e1      	b.n	800160a <LL_USART_EnableIT_RXNE+0x8>
}
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	330c      	adds	r3, #12
 800165c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	e853 3f00 	ldrex	r3, [r3]
 8001664:	60bb      	str	r3, [r7, #8]
   return(result);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f023 0320 	bic.w	r3, r3, #32
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	330c      	adds	r3, #12
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	61ba      	str	r2, [r7, #24]
 8001676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001678:	6979      	ldr	r1, [r7, #20]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	e841 2300 	strex	r3, r2, [r1]
 8001680:	613b      	str	r3, [r7, #16]
   return(result);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d000      	beq.n	8001694 <LL_USART_DisableIT_RXNE+0x44>
 8001692:	e7e1      	b.n	8001658 <LL_USART_DisableIT_RXNE+0x8>
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	b2db      	uxtb	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016de:	e7fe      	b.n	80016de <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <HardFault_Handler+0x4>

080016e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <BusFault_Handler+0x4>

080016f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	IncrementSystemTick_Callback();
 8001720:	f7ff fb32 	bl	8000d88 <IncrementSystemTick_Callback>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_5) && LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8001738:	2105      	movs	r1, #5
 800173a:	481b      	ldr	r0, [pc, #108]	; (80017a8 <DMA1_Channel5_IRQHandler+0x74>)
 800173c:	f7ff ff26 	bl	800158c <LL_DMA_IsEnabledIT_TC>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <DMA1_Channel5_IRQHandler+0x22>
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <DMA1_Channel5_IRQHandler+0x74>)
 8001748:	f7ff feec 	bl	8001524 <LL_DMA_IsActiveFlag_TC5>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <DMA1_Channel5_IRQHandler+0x22>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <DMA1_Channel5_IRQHandler+0x24>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <DMA1_Channel5_IRQHandler+0x56>

		LL_DMA_ClearFlag_TC5(DMA1);
 800175c:	4812      	ldr	r0, [pc, #72]	; (80017a8 <DMA1_Channel5_IRQHandler+0x74>)
 800175e:	f7ff ff07 	bl	8001570 <LL_DMA_ClearFlag_TC5>


		// Read sbus channels
		G.Sbus.readSbusFrame();
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <DMA1_Channel5_IRQHandler+0x78>)
 8001764:	f7ff fe43 	bl	80013ee <_ZN3def4Sbus13readSbusFrameEv>

		if ( ! G.Sbus.isSynced() ) {
 8001768:	4810      	ldr	r0, [pc, #64]	; (80017ac <DMA1_Channel5_IRQHandler+0x78>)
 800176a:	f7ff fe94 	bl	8001496 <_ZN3def4Sbus8isSyncedEv>
 800176e:	4603      	mov	r3, r0
 8001770:	f083 0301 	eor.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d013      	beq.n	80017a2 <DMA1_Channel5_IRQHandler+0x6e>

			// Disable DMA Ring buffer reading
			// - get re-eanbled later, when sync
			//   is found by the rxne byte checking
			//
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 800177a:	2105      	movs	r1, #5
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <DMA1_Channel5_IRQHandler+0x74>)
 800177e:	f7ff feb3 	bl	80014e8 <LL_DMA_DisableChannel>


			// Enable USART1 RXNE to start
			// checking for sync
			//
			LL_USART_EnableIT_RXNE(USART1);
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <DMA1_Channel5_IRQHandler+0x7c>)
 8001784:	f7ff ff3d 	bl	8001602 <LL_USART_EnableIT_RXNE>
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001788:	e00b      	b.n	80017a2 <DMA1_Channel5_IRQHandler+0x6e>
	} else if ( LL_DMA_IsActiveFlag_TE5(DMA1) ) {
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <DMA1_Channel5_IRQHandler+0x74>)
 800178c:	f7ff fedd 	bl	800154a <LL_DMA_IsActiveFlag_TE5>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf14      	ite	ne
 8001796:	2301      	movne	r3, #1
 8001798:	2300      	moveq	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d000      	beq.n	80017a2 <DMA1_Channel5_IRQHandler+0x6e>
		__NOP();
 80017a0:	bf00      	nop
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40020000 	.word	0x40020000
 80017ac:	2000008c 	.word	0x2000008c
 80017b0:	40013800 	.word	0x40013800

080017b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if (LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1) ) {
 80017c6:	4819      	ldr	r0, [pc, #100]	; (800182c <USART1_IRQHandler+0x6c>)
 80017c8:	f7ff ff69 	bl	800169e <LL_USART_IsEnabledIT_RXNE>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <USART1_IRQHandler+0x22>
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <USART1_IRQHandler+0x6c>)
 80017d4:	f7ff fef6 	bl	80015c4 <LL_USART_IsActiveFlag_RXNE>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <USART1_IRQHandler+0x22>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <USART1_IRQHandler+0x24>
 80017e2:	2300      	movs	r3, #0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01d      	beq.n	8001824 <USART1_IRQHandler+0x64>

		LL_USART_ClearFlag_RXNE(USART1);
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <USART1_IRQHandler+0x6c>)
 80017ea:	f7ff fefd 	bl	80015e8 <LL_USART_ClearFlag_RXNE>

		if ( ! G.Sbus.isSynced() ) {
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <USART1_IRQHandler+0x70>)
 80017f0:	f7ff fe51 	bl	8001496 <_ZN3def4Sbus8isSyncedEv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f083 0301 	eor.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00a      	beq.n	8001816 <USART1_IRQHandler+0x56>

			// Try finding sync
			G.Sbus.findSync( LL_USART_ReceiveData8(USART1) );
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <USART1_IRQHandler+0x6c>)
 8001802:	f7ff ff5e 	bl	80016c2 <LL_USART_ReceiveData8>
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	4619      	mov	r1, r3
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <USART1_IRQHandler+0x70>)
 8001810:	f7ff fe0e 	bl	8001430 <_ZN3def4Sbus8findSyncERKh>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001814:	e006      	b.n	8001824 <USART1_IRQHandler+0x64>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8001816:	2105      	movs	r1, #5
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <USART1_IRQHandler+0x74>)
 800181a:	f7ff fe47 	bl	80014ac <LL_DMA_EnableChannel>
			LL_USART_DisableIT_RXNE(USART1);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <USART1_IRQHandler+0x6c>)
 8001820:	f7ff ff16 	bl	8001650 <LL_USART_DisableIT_RXNE>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	2000008c 	.word	0x2000008c
 8001834:	40020000 	.word	0x40020000

08001838 <_Z41__static_initialization_and_destruction_0ii>:
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d115      	bne.n	8001874 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	4293      	cmp	r3, r2
 8001850:	d110      	bne.n	8001874 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001870:	f7ff f9f2 	bl	8000c58 <_ZN7GlobalsC1Ev>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	4293      	cmp	r3, r2
 8001882:	d110      	bne.n	80018a6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80018a2:	f7ff fa7f 	bl	8000da4 <_ZN7GlobalsD1Ev>
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000f8 	.word	0x200000f8
 80018b4:	20000084 	.word	0x20000084

080018b8 <_GLOBAL__sub_I_NMI_Handler>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018c0:	2001      	movs	r0, #1
 80018c2:	f7ff ffb9 	bl	8001838 <_Z41__static_initialization_and_destruction_0ii>
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_GLOBAL__sub_D_NMI_Handler>:
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ffb1 	bl	8001838 <_Z41__static_initialization_and_destruction_0ii>
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <SystemCoreClockUpdate+0xd0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b08      	cmp	r3, #8
 8001904:	d011      	beq.n	800192a <SystemCoreClockUpdate+0x46>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d83a      	bhi.n	8001982 <SystemCoreClockUpdate+0x9e>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <SystemCoreClockUpdate+0x36>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d004      	beq.n	8001922 <SystemCoreClockUpdate+0x3e>
 8001918:	e033      	b.n	8001982 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <SystemCoreClockUpdate+0xd8>)
 800191e:	601a      	str	r2, [r3, #0]
      break;
 8001920:	e033      	b.n	800198a <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <SystemCoreClockUpdate+0xd8>)
 8001926:	601a      	str	r2, [r3, #0]
      break;
 8001928:	e02f      	b.n	800198a <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <SystemCoreClockUpdate+0xd0>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001932:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <SystemCoreClockUpdate+0xd0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	0c9b      	lsrs	r3, r3, #18
 8001942:	3302      	adds	r3, #2
 8001944:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d106      	bne.n	800195a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <SystemCoreClockUpdate+0xdc>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 8001956:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8001958:	e017      	b.n	800198a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <SystemCoreClockUpdate+0xd0>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <SystemCoreClockUpdate+0xdc>)
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 8001970:	6013      	str	r3, [r2, #0]
      break;
 8001972:	e00a      	b.n	800198a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <SystemCoreClockUpdate+0xd8>)
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 800197e:	6013      	str	r3, [r2, #0]
      break;
 8001980:	e003      	b.n	800198a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <SystemCoreClockUpdate+0xd8>)
 8001986:	601a      	str	r2, [r3, #0]
      break;
 8001988:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <SystemCoreClockUpdate+0xd0>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	091b      	lsrs	r3, r3, #4
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <SystemCoreClockUpdate+0xe0>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <SystemCoreClockUpdate+0xd4>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	20000000 	.word	0x20000000
 80019bc:	007a1200 	.word	0x007a1200
 80019c0:	003d0900 	.word	0x003d0900
 80019c4:	08002990 	.word	0x08002990

080019c8 <__NVIC_GetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4906      	ldr	r1, [pc, #24]	; (8001a18 <__NVIC_EnableIRQ+0x34>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	1e59      	subs	r1, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
         );
 8001ac4:	4313      	orrs	r3, r2
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <LL_DMA_SetDataTransferDirection>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LL_DMA_SetDataTransferDirection+0x44>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001af0:	f023 0310 	bic.w	r3, r3, #16
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	3a01      	subs	r2, #1
 8001af8:	4906      	ldr	r1, [pc, #24]	; (8001b14 <LL_DMA_SetDataTransferDirection+0x44>)
 8001afa:	5c8a      	ldrb	r2, [r1, r2]
 8001afc:	4611      	mov	r1, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	440a      	add	r2, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	080029a8 	.word	0x080029a8

08001b18 <LL_DMA_SetMode>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LL_DMA_SetMode+0x40>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 0220 	bic.w	r2, r3, #32
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <LL_DMA_SetMode+0x40>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	440b      	add	r3, r1
 8001b46:	4619      	mov	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	080029a8 	.word	0x080029a8

08001b5c <LL_DMA_SetPeriphIncMode>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LL_DMA_SetPeriphIncMode+0x40>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	461a      	mov	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	4906      	ldr	r1, [pc, #24]	; (8001b9c <LL_DMA_SetPeriphIncMode+0x40>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	4619      	mov	r1, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	440b      	add	r3, r1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	080029a8 	.word	0x080029a8

08001ba0 <LL_DMA_SetMemoryIncMode>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LL_DMA_SetMemoryIncMode+0x40>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4413      	add	r3, r2
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	4906      	ldr	r1, [pc, #24]	; (8001be0 <LL_DMA_SetMemoryIncMode+0x40>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	440b      	add	r3, r1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	080029a8 	.word	0x080029a8

08001be4 <LL_DMA_SetPeriphSize>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <LL_DMA_SetPeriphSize+0x40>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <LL_DMA_SetPeriphSize+0x40>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	440b      	add	r3, r1
 8001c12:	4619      	mov	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	080029a8 	.word	0x080029a8

08001c28 <LL_DMA_SetMemorySize>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <LL_DMA_SetMemorySize+0x40>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <LL_DMA_SetMemorySize+0x40>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	440b      	add	r3, r1
 8001c56:	4619      	mov	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	080029a8 	.word	0x080029a8

08001c6c <LL_DMA_SetChannelPriorityLevel>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	4619      	mov	r1, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	440b      	add	r3, r1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	080029a8 	.word	0x080029a8

08001cb0 <LL_DMA_SetDataLength>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <LL_DMA_SetDataLength+0x40>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <LL_DMA_SetDataLength+0x40>)
 8001cd6:	5c8a      	ldrb	r2, [r1, r2]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	440a      	add	r2, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	080029a8 	.word	0x080029a8

08001cf4 <LL_DMA_SetMemoryAddress>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <LL_DMA_SetMemoryAddress+0x2c>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	080029a8 	.word	0x080029a8

08001d24 <LL_DMA_SetPeriphAddress>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <LL_DMA_SetPeriphAddress+0x2c>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6093      	str	r3, [r2, #8]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	080029a8 	.word	0x080029a8

08001d54 <LL_DMA_EnableIT_TC>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <LL_DMA_EnableIT_TC+0x38>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	3a01      	subs	r2, #1
 8001d72:	4906      	ldr	r1, [pc, #24]	; (8001d8c <LL_DMA_EnableIT_TC+0x38>)
 8001d74:	5c8a      	ldrb	r2, [r1, r2]
 8001d76:	4611      	mov	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	440a      	add	r2, r1
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	080029a8 	.word	0x080029a8

08001d90 <LL_AHB1_GRP1_EnableClock>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <LL_APB2_GRP1_EnableClock>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <LL_USART_Enable>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <LL_USART_ConfigAsyncMode>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_USART_EnableIT_RXNE>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	330c      	adds	r3, #12
 8001e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	e853 3f00 	ldrex	r3, [r3]
 8001e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f043 0320 	orr.w	r3, r3, #32
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	61ba      	str	r2, [r7, #24]
 8001e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	e841 2300 	strex	r3, r2, [r1]
 8001e68:	613b      	str	r3, [r7, #16]
   return(result);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d000      	beq.n	8001e7c <LL_USART_EnableIT_RXNE+0x44>
 8001e7a:	e7e1      	b.n	8001e40 <LL_USART_EnableIT_RXNE+0x8>
}
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <LL_USART_EnableDMAReq_RX>:
{
 8001e86:	b480      	push	{r7}
 8001e88:	b089      	sub	sp, #36	; 0x24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3314      	adds	r3, #20
 8001e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	e853 3f00 	ldrex	r3, [r3]
 8001e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	61ba      	str	r2, [r7, #24]
 8001eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	e841 2300 	strex	r3, r2, [r1]
 8001eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf14      	ite	ne
 8001ebe:	2301      	movne	r3, #1
 8001ec0:	2300      	moveq	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d000      	beq.n	8001eca <LL_USART_EnableDMAReq_RX+0x44>
 8001ec8:	e7e1      	b.n	8001e8e <LL_USART_EnableDMAReq_RX+0x8>
}
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <LL_USART_DMA_GetRegAddr>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3304      	adds	r3, #4
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
	...

08001eec <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]

  // Clock Configuration
  //
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001f14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f18:	f7ff ff52 	bl	8001dc0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001f1c:	2004      	movs	r0, #4
 8001f1e:	f7ff ff4f 	bl	8001dc0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff ff34 	bl	8001d90 <LL_AHB1_GRP1_EnableClock>
  //
  //PA9   ------> USART1_TX
  //PA10   ------> USART1_RX
  //

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001f28:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <MX_USART1_UART_Init+0x168>)
 8001f2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	463b      	mov	r3, r7
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4846      	ldr	r0, [pc, #280]	; (8002058 <MX_USART1_UART_Init+0x16c>)
 8001f3e:	f000 f9c4 	bl	80022ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <MX_USART1_UART_Init+0x170>)
 8001f44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001f46:	2304      	movs	r3, #4
 8001f48:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4842      	ldr	r0, [pc, #264]	; (8002058 <MX_USART1_UART_Init+0x16c>)
 8001f50:	f000 f9bb 	bl	80022ca <LL_GPIO_Init>

  // USART1 DMA Init
  //
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2105      	movs	r1, #5
 8001f58:	4841      	ldr	r0, [pc, #260]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f5a:	f7ff fdb9 	bl	8001ad0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_HIGH);
 8001f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f62:	2105      	movs	r1, #5
 8001f64:	483e      	ldr	r0, [pc, #248]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f66:	f7ff fe81 	bl	8001c6c <LL_DMA_SetChannelPriorityLevel>

  //LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	2105      	movs	r1, #5
 8001f6e:	483c      	ldr	r0, [pc, #240]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f70:	f7ff fdd2 	bl	8001b18 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2105      	movs	r1, #5
 8001f78:	4839      	ldr	r0, [pc, #228]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f7a:	f7ff fdef 	bl	8001b5c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	2105      	movs	r1, #5
 8001f82:	4837      	ldr	r0, [pc, #220]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f84:	f7ff fe0c 	bl	8001ba0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2105      	movs	r1, #5
 8001f8c:	4834      	ldr	r0, [pc, #208]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f8e:	f7ff fe29 	bl	8001be4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2105      	movs	r1, #5
 8001f96:	4832      	ldr	r0, [pc, #200]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001f98:	f7ff fe46 	bl	8001c28 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_USART_DMA_GetRegAddr(USART1));
 8001f9c:	4831      	ldr	r0, [pc, #196]	; (8002064 <MX_USART1_UART_Init+0x178>)
 8001f9e:	f7ff ff99 	bl	8001ed4 <LL_USART_DMA_GetRegAddr>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2105      	movs	r1, #5
 8001fa8:	482d      	ldr	r0, [pc, #180]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001faa:	f7ff febb 	bl	8001d24 <LL_DMA_SetPeriphAddress>


  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)G.Sbus.buffer);
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <MX_USART1_UART_Init+0x17c>)
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2105      	movs	r1, #5
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001fb6:	f7ff fe9d 	bl	8001cf4 <LL_DMA_SetMemoryAddress>

  //LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (uint32_t)G.Sbus.SBUS_FRAME_LEN );

  #define ARRAY_LEN(x)            (sizeof(x) / sizeof((x)[0]))
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, ARRAY_LEN(G.Sbus.buffer));
 8001fba:	2219      	movs	r2, #25
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	4828      	ldr	r0, [pc, #160]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001fc0:	f7ff fe76 	bl	8001cb0 <LL_DMA_SetDataLength>

  //LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	4826      	ldr	r0, [pc, #152]	; (8002060 <MX_USART1_UART_Init+0x174>)
 8001fc8:	f7ff fec4 	bl	8001d54 <LL_DMA_EnableIT_TC>

  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fcc:	f7ff fcfc 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fd4a 	bl	8001a70 <NVIC_EncodePriority>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	200f      	movs	r0, #15
 8001fe2:	f7ff fd1b 	bl	8001a1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f7ff fcfc 	bl	80019e4 <__NVIC_EnableIRQ>


  // USART1 Init
  //

  USART_InitStruct.BaudRate = 100000;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_USART1_UART_Init+0x180>)
 8001fee:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ffc:	230c      	movs	r3, #12
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4815      	ldr	r0, [pc, #84]	; (8002064 <MX_USART1_UART_Init+0x178>)
 8002010:	f000 fb6a 	bl	80026e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002014:	4813      	ldr	r0, [pc, #76]	; (8002064 <MX_USART1_UART_Init+0x178>)
 8002016:	f7ff fefa 	bl	8001e0e <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 800201a:	4812      	ldr	r0, [pc, #72]	; (8002064 <MX_USART1_UART_Init+0x178>)
 800201c:	f7ff ff33 	bl	8001e86 <LL_USART_EnableDMAReq_RX>


  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002020:	f7ff fcd2 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8002024:	4603      	mov	r3, r0
 8002026:	2201      	movs	r2, #1
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fd20 	bl	8001a70 <NVIC_EncodePriority>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	2025      	movs	r0, #37	; 0x25
 8002036:	f7ff fcf1 	bl	8001a1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800203a:	2025      	movs	r0, #37	; 0x25
 800203c:	f7ff fcd2 	bl	80019e4 <__NVIC_EnableIRQ>

  //LL_USART_EnableIT_IDLE(USART1);
  LL_USART_EnableIT_RXNE(USART1);
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <MX_USART1_UART_Init+0x178>)
 8002042:	f7ff fef9 	bl	8001e38 <LL_USART_EnableIT_RXNE>

  // Enable both
  //LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
  LL_USART_Enable(USART1);
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_USART1_UART_Init+0x178>)
 8002048:	f7ff fed2 	bl	8001df0 <LL_USART_Enable>


}
 800204c:	bf00      	nop
 800204e:	3730      	adds	r7, #48	; 0x30
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	04020002 	.word	0x04020002
 8002058:	40010800 	.word	0x40010800
 800205c:	04040004 	.word	0x04040004
 8002060:	40020000 	.word	0x40020000
 8002064:	40013800 	.word	0x40013800
 8002068:	20000098 	.word	0x20000098
 800206c:	000186a0 	.word	0x000186a0

08002070 <_Z41__static_initialization_and_destruction_0ii>:
  LL_USART_Enable(USART3);
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d115      	bne.n	80020ac <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002086:	4293      	cmp	r3, r2
 8002088:	d110      	bne.n	80020ac <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80020a8:	f7fe fdd6 	bl	8000c58 <_ZN7GlobalsC1Ev>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d110      	bne.n	80020de <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80020da:	f7fe fe63 	bl	8000da4 <_ZN7GlobalsD1Ev>
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200000f8 	.word	0x200000f8
 80020ec:	20000084 	.word	0x20000084

080020f0 <_GLOBAL__sub_I_MX_USART1_UART_Init>:
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff ffb9 	bl	8002070 <_Z41__static_initialization_and_destruction_0ii>
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_GLOBAL__sub_D_MX_USART1_UART_Init>:
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
 8002104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ffb1 	bl	8002070 <_Z41__static_initialization_and_destruction_0ii>
 800210e:	bd80      	pop	{r7, pc}

08002110 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002110:	f7ff fbe2 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <LoopFillZerobss+0x16>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800212c:	4c09      	ldr	r4, [pc, #36]	; (8002154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213a:	f000 fb6f 	bl	800281c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800213e:	f7fe fd9f 	bl	8000c80 <main>
  bx lr
 8002142:	4770      	bx	lr
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800214c:	080029d0 	.word	0x080029d0
  ldr r2, =_sbss
 8002150:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002154:	20000104 	.word	0x20000104

08002158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_2_IRQHandler>

0800215a <LL_GPIO_SetPinMode>:
{
 800215a:	b490      	push	{r4, r7}
 800215c:	b088      	sub	sp, #32
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0e1b      	lsrs	r3, r3, #24
 800216e:	4413      	add	r3, r2
 8002170:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	613b      	str	r3, [r7, #16]
  return result;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	210f      	movs	r1, #15
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	61bb      	str	r3, [r7, #24]
  return result;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	6023      	str	r3, [r4, #0]
}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc90      	pop	{r4, r7}
 80021bc:	4770      	bx	lr

080021be <LL_GPIO_SetPinSpeed>:
{
 80021be:	b490      	push	{r4, r7}
 80021c0:	b088      	sub	sp, #32
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0e1b      	lsrs	r3, r3, #24
 80021d2:	4413      	add	r3, r2
 80021d4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	613b      	str	r3, [r7, #16]
  return result;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	2103      	movs	r1, #3
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	401a      	ands	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	61bb      	str	r3, [r7, #24]
  return result;
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	6023      	str	r3, [r4, #0]
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bc90      	pop	{r4, r7}
 8002220:	4770      	bx	lr

08002222 <LL_GPIO_SetPinOutputType>:
{
 8002222:	b490      	push	{r4, r7}
 8002224:	b088      	sub	sp, #32
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0e1b      	lsrs	r3, r3, #24
 8002236:	4413      	add	r3, r2
 8002238:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800223a:	6822      	ldr	r2, [r4, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	613b      	str	r3, [r7, #16]
  return result;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	2104      	movs	r1, #4
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	61bb      	str	r3, [r7, #24]
  return result;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	6023      	str	r3, [r4, #0]
}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bc90      	pop	{r4, r7}
 8002284:	4770      	bx	lr

08002286 <LL_GPIO_SetPinPull>:
{
 8002286:	b480      	push	{r7}
 8002288:	b087      	sub	sp, #28
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	613b      	str	r3, [r7, #16]
  return result;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	408b      	lsls	r3, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b088      	sub	sp, #32
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	0c1b      	lsrs	r3, r3, #16
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	60fb      	str	r3, [r7, #12]
  return result;
 80022ea:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80022f4:	e044      	b.n	8002380 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80022f6:	2201      	movs	r2, #1
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	409a      	lsls	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03a      	beq.n	800237a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b07      	cmp	r3, #7
 8002308:	d806      	bhi.n	8002318 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800230a:	f240 1201 	movw	r2, #257	; 0x101
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e008      	b.n	800232a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3b08      	subs	r3, #8
 800231c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002328:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d106      	bne.n	8002340 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	461a      	mov	r2, r3
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa3 	bl	8002286 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	461a      	mov	r2, r3
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff06 	bl	800215a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d003      	beq.n	800235e <LL_GPIO_Init+0x94>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b09      	cmp	r3, #9
 800235c:	d10d      	bne.n	800237a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	461a      	mov	r2, r3
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff29 	bl	80021be <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	461a      	mov	r2, r3
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff54 	bl	8002222 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1b4      	bne.n	80022f6 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <LL_RCC_GetSysClkSource>:
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <LL_RCC_GetSysClkSource+0x14>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_GetAHBPrescaler>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <LL_RCC_GetAHBPrescaler+0x14>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000

080023c8 <LL_RCC_GetAPB1Prescaler>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40021000 	.word	0x40021000

080023e0 <LL_RCC_GetAPB2Prescaler>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <LL_RCC_GetAPB2Prescaler+0x14>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <LL_RCC_PLL_GetMainSource+0x14>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000

08002410 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000

08002428 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <LL_RCC_PLL_GetPrediv+0x18>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c5b      	lsrs	r3, r3, #17
 8002432:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000

08002444 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800244c:	f000 f820 	bl	8002490 <RCC_GetSystemClockFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f83e 	bl	80024dc <RCC_GetHCLKClockFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f84c 	bl	8002508 <RCC_GetPCLK1ClockFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f858 	bl	8002530 <RCC_GetPCLK2ClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60da      	str	r2, [r3, #12]
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800249a:	f7ff ff7d 	bl	8002398 <LL_RCC_GetSysClkSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d00c      	beq.n	80024be <RCC_GetSystemClockFreq+0x2e>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d80e      	bhi.n	80024c6 <RCC_GetSystemClockFreq+0x36>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <RCC_GetSystemClockFreq+0x22>
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d003      	beq.n	80024b8 <RCC_GetSystemClockFreq+0x28>
 80024b0:	e009      	b.n	80024c6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <RCC_GetSystemClockFreq+0x48>)
 80024b4:	607b      	str	r3, [r7, #4]
      break;
 80024b6:	e009      	b.n	80024cc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <RCC_GetSystemClockFreq+0x48>)
 80024ba:	607b      	str	r3, [r7, #4]
      break;
 80024bc:	e006      	b.n	80024cc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80024be:	f000 f84b 	bl	8002558 <RCC_PLL_GetFreqDomain_SYS>
 80024c2:	6078      	str	r0, [r7, #4]
      break;
 80024c4:	e002      	b.n	80024cc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <RCC_GetSystemClockFreq+0x48>)
 80024c8:	607b      	str	r3, [r7, #4]
      break;
 80024ca:	bf00      	nop
  }

  return frequency;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	007a1200 	.word	0x007a1200

080024dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024e4:	f7ff ff64 	bl	80023b0 <LL_RCC_GetAHBPrescaler>
 80024e8:	4603      	mov	r3, r0
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <RCC_GetHCLKClockFreq+0x28>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	461a      	mov	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	40d3      	lsrs	r3, r2
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	08002990 	.word	0x08002990

08002508 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002510:	f7ff ff5a 	bl	80023c8 <LL_RCC_GetAPB1Prescaler>
 8002514:	4603      	mov	r3, r0
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <RCC_GetPCLK1ClockFreq+0x24>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	40d3      	lsrs	r3, r2
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	080029a0 	.word	0x080029a0

08002530 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002538:	f7ff ff52 	bl	80023e0 <LL_RCC_GetAPB2Prescaler>
 800253c:	4603      	mov	r3, r0
 800253e:	0adb      	lsrs	r3, r3, #11
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <RCC_GetPCLK2ClockFreq+0x24>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	40d3      	lsrs	r3, r2
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	080029a0 	.word	0x080029a0

08002558 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002566:	f7ff ff47 	bl	80023f8 <LL_RCC_PLL_GetMainSource>
 800256a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d003      	beq.n	8002582 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800257a:	e00b      	b.n	8002594 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800257e:	607b      	str	r3, [r7, #4]
      break;
 8002580:	e00b      	b.n	800259a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002582:	f7ff ff51 	bl	8002428 <LL_RCC_PLL_GetPrediv>
 8002586:	4603      	mov	r3, r0
 8002588:	3301      	adds	r3, #1
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	607b      	str	r3, [r7, #4]
      break;
 8002592:	e002      	b.n	800259a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002596:	607b      	str	r3, [r7, #4]
      break;
 8002598:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800259a:	f7ff ff39 	bl	8002410 <LL_RCC_PLL_GetMultiplicator>
 800259e:	4603      	mov	r3, r0
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3302      	adds	r3, #2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	003d0900 	.word	0x003d0900
 80025b8:	007a1200 	.word	0x007a1200

080025bc <LL_USART_IsEnabled>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_USART_SetStopBitsLength>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <LL_USART_SetHWFlowCtrl>:
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	615a      	str	r2, [r3, #20]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <LL_USART_SetBaudRate>:
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	009a      	lsls	r2, r3, #2
 8002642:	441a      	add	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <LL_USART_SetBaudRate+0xb8>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	b29b      	uxth	r3, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b299      	uxth	r1, r3
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	fbb2 f2f3 	udiv	r2, r2, r3
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <LL_USART_SetBaudRate+0xb8>)
 8002670:	fba3 0302 	umull	r0, r3, r3, r2
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	fb00 f303 	mul.w	r3, r0, r3
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	3332      	adds	r3, #50	; 0x32
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <LL_USART_SetBaudRate+0xb8>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b29b      	uxth	r3, r3
 800268c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002690:	b29b      	uxth	r3, r3
 8002692:	440b      	add	r3, r1
 8002694:	b299      	uxth	r1, r3
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <LL_USART_SetBaudRate+0xb8>)
 80026ac:	fba3 0302 	umull	r0, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	2064      	movs	r0, #100	; 0x64
 80026b4:	fb00 f303 	mul.w	r3, r0, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	3332      	adds	r3, #50	; 0x32
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <LL_USART_SetBaudRate+0xb8>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	440b      	add	r3, r1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	51eb851f 	.word	0x51eb851f

080026e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff5e 	bl	80025bc <LL_USART_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d145      	bne.n	8002792 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800270e:	f023 030c 	bic.w	r3, r3, #12
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	6851      	ldr	r1, [r2, #4]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	4311      	orrs	r1, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6912      	ldr	r2, [r2, #16]
 8002720:	430a      	orrs	r2, r1
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff57 	bl	80025e2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff63 	bl	8002606 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fe7d 	bl	8002444 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <LL_USART_Init+0xb4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d102      	bne.n	8002758 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e00c      	b.n	8002772 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <LL_USART_Init+0xb8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e005      	b.n	8002772 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <LL_USART_Init+0xbc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00c      	beq.n	8002792 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002780:	2300      	movs	r3, #0
 8002782:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff4d 	bl	800262c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002792:	7ffb      	ldrb	r3, [r7, #31]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013800 	.word	0x40013800
 80027a0:	40004400 	.word	0x40004400
 80027a4:	40004800 	.word	0x40004800

080027a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <LL_InitTick+0x30>)
 80027bc:	3b01      	subs	r3, #1
 80027be:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <LL_InitTick+0x30>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <LL_InitTick+0x30>)
 80027c8:	2205      	movs	r2, #5
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffdd 	bl	80027a8 <LL_InitTick>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <LL_SetSystemCoreClock+0x18>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000000 	.word	0x20000000

08002814 <_ZdlPvj>:
 8002814:	f000 b800 	b.w	8002818 <_ZdlPv>

08002818 <_ZdlPv>:
 8002818:	f000 b824 	b.w	8002864 <free>

0800281c <__libc_init_array>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	2600      	movs	r6, #0
 8002820:	4d0c      	ldr	r5, [pc, #48]	; (8002854 <__libc_init_array+0x38>)
 8002822:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <__libc_init_array+0x3c>)
 8002824:	1b64      	subs	r4, r4, r5
 8002826:	10a4      	asrs	r4, r4, #2
 8002828:	42a6      	cmp	r6, r4
 800282a:	d109      	bne.n	8002840 <__libc_init_array+0x24>
 800282c:	f000 f878 	bl	8002920 <_init>
 8002830:	2600      	movs	r6, #0
 8002832:	4d0a      	ldr	r5, [pc, #40]	; (800285c <__libc_init_array+0x40>)
 8002834:	4c0a      	ldr	r4, [pc, #40]	; (8002860 <__libc_init_array+0x44>)
 8002836:	1b64      	subs	r4, r4, r5
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	42a6      	cmp	r6, r4
 800283c:	d105      	bne.n	800284a <__libc_init_array+0x2e>
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	f855 3b04 	ldr.w	r3, [r5], #4
 8002844:	4798      	blx	r3
 8002846:	3601      	adds	r6, #1
 8002848:	e7ee      	b.n	8002828 <__libc_init_array+0xc>
 800284a:	f855 3b04 	ldr.w	r3, [r5], #4
 800284e:	4798      	blx	r3
 8002850:	3601      	adds	r6, #1
 8002852:	e7f2      	b.n	800283a <__libc_init_array+0x1e>
 8002854:	080029b0 	.word	0x080029b0
 8002858:	080029b0 	.word	0x080029b0
 800285c:	080029b0 	.word	0x080029b0
 8002860:	080029c0 	.word	0x080029c0

08002864 <free>:
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <free+0xc>)
 8002866:	4601      	mov	r1, r0
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	f000 b803 	b.w	8002874 <_free_r>
 800286e:	bf00      	nop
 8002870:	20000004 	.word	0x20000004

08002874 <_free_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4605      	mov	r5, r0
 8002878:	2900      	cmp	r1, #0
 800287a:	d040      	beq.n	80028fe <_free_r+0x8a>
 800287c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002880:	1f0c      	subs	r4, r1, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	bfb8      	it	lt
 8002886:	18e4      	addlt	r4, r4, r3
 8002888:	f000 f83c 	bl	8002904 <__malloc_lock>
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <_free_r+0x8c>)
 800288e:	6813      	ldr	r3, [r2, #0]
 8002890:	b933      	cbnz	r3, 80028a0 <_free_r+0x2c>
 8002892:	6063      	str	r3, [r4, #4]
 8002894:	6014      	str	r4, [r2, #0]
 8002896:	4628      	mov	r0, r5
 8002898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800289c:	f000 b838 	b.w	8002910 <__malloc_unlock>
 80028a0:	42a3      	cmp	r3, r4
 80028a2:	d908      	bls.n	80028b6 <_free_r+0x42>
 80028a4:	6820      	ldr	r0, [r4, #0]
 80028a6:	1821      	adds	r1, r4, r0
 80028a8:	428b      	cmp	r3, r1
 80028aa:	bf01      	itttt	eq
 80028ac:	6819      	ldreq	r1, [r3, #0]
 80028ae:	685b      	ldreq	r3, [r3, #4]
 80028b0:	1809      	addeq	r1, r1, r0
 80028b2:	6021      	streq	r1, [r4, #0]
 80028b4:	e7ed      	b.n	8002892 <_free_r+0x1e>
 80028b6:	461a      	mov	r2, r3
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	b10b      	cbz	r3, 80028c0 <_free_r+0x4c>
 80028bc:	42a3      	cmp	r3, r4
 80028be:	d9fa      	bls.n	80028b6 <_free_r+0x42>
 80028c0:	6811      	ldr	r1, [r2, #0]
 80028c2:	1850      	adds	r0, r2, r1
 80028c4:	42a0      	cmp	r0, r4
 80028c6:	d10b      	bne.n	80028e0 <_free_r+0x6c>
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	4401      	add	r1, r0
 80028cc:	1850      	adds	r0, r2, r1
 80028ce:	4283      	cmp	r3, r0
 80028d0:	6011      	str	r1, [r2, #0]
 80028d2:	d1e0      	bne.n	8002896 <_free_r+0x22>
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4401      	add	r1, r0
 80028da:	6011      	str	r1, [r2, #0]
 80028dc:	6053      	str	r3, [r2, #4]
 80028de:	e7da      	b.n	8002896 <_free_r+0x22>
 80028e0:	d902      	bls.n	80028e8 <_free_r+0x74>
 80028e2:	230c      	movs	r3, #12
 80028e4:	602b      	str	r3, [r5, #0]
 80028e6:	e7d6      	b.n	8002896 <_free_r+0x22>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	1821      	adds	r1, r4, r0
 80028ec:	428b      	cmp	r3, r1
 80028ee:	bf01      	itttt	eq
 80028f0:	6819      	ldreq	r1, [r3, #0]
 80028f2:	685b      	ldreq	r3, [r3, #4]
 80028f4:	1809      	addeq	r1, r1, r0
 80028f6:	6021      	streq	r1, [r4, #0]
 80028f8:	6063      	str	r3, [r4, #4]
 80028fa:	6054      	str	r4, [r2, #4]
 80028fc:	e7cb      	b.n	8002896 <_free_r+0x22>
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	200000fc 	.word	0x200000fc

08002904 <__malloc_lock>:
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <__malloc_lock+0x8>)
 8002906:	f000 b809 	b.w	800291c <__retarget_lock_acquire_recursive>
 800290a:	bf00      	nop
 800290c:	20000100 	.word	0x20000100

08002910 <__malloc_unlock>:
 8002910:	4801      	ldr	r0, [pc, #4]	; (8002918 <__malloc_unlock+0x8>)
 8002912:	f000 b804 	b.w	800291e <__retarget_lock_release_recursive>
 8002916:	bf00      	nop
 8002918:	20000100 	.word	0x20000100

0800291c <__retarget_lock_acquire_recursive>:
 800291c:	4770      	bx	lr

0800291e <__retarget_lock_release_recursive>:
 800291e:	4770      	bx	lr

08002920 <_init>:
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002922:	bf00      	nop
 8002924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002926:	bc08      	pop	{r3}
 8002928:	469e      	mov	lr, r3
 800292a:	4770      	bx	lr

0800292c <_fini>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr
