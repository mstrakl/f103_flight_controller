
flightCtrl_v0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003114  08003114  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003114  08003114  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003114  08003114  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000068  0800319c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800319c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066a8  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f37  00000000  00000000  00026739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00028e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021f8  00000000  00000000  00029588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059e7  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005dc73  00000000  00000000  00031167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008edda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  0008ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003084 	.word	0x08003084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003084 	.word	0x08003084

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_d2uiz>:
 800062c:	004a      	lsls	r2, r1, #1
 800062e:	d211      	bcs.n	8000654 <__aeabi_d2uiz+0x28>
 8000630:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000634:	d211      	bcs.n	800065a <__aeabi_d2uiz+0x2e>
 8000636:	d50d      	bpl.n	8000654 <__aeabi_d2uiz+0x28>
 8000638:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800063c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000640:	d40e      	bmi.n	8000660 <__aeabi_d2uiz+0x34>
 8000642:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	4770      	bx	lr
 8000654:	f04f 0000 	mov.w	r0, #0
 8000658:	4770      	bx	lr
 800065a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065e:	d102      	bne.n	8000666 <__aeabi_d2uiz+0x3a>
 8000660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000664:	4770      	bx	lr
 8000666:	f04f 0000 	mov.w	r0, #0
 800066a:	4770      	bx	lr

0800066c <__aeabi_frsub>:
 800066c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000670:	e002      	b.n	8000678 <__addsf3>
 8000672:	bf00      	nop

08000674 <__aeabi_fsub>:
 8000674:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000678 <__addsf3>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	bf1f      	itttt	ne
 800067c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000680:	ea92 0f03 	teqne	r2, r3
 8000684:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000688:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800068c:	d06a      	beq.n	8000764 <__addsf3+0xec>
 800068e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000692:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000696:	bfc1      	itttt	gt
 8000698:	18d2      	addgt	r2, r2, r3
 800069a:	4041      	eorgt	r1, r0
 800069c:	4048      	eorgt	r0, r1
 800069e:	4041      	eorgt	r1, r0
 80006a0:	bfb8      	it	lt
 80006a2:	425b      	neglt	r3, r3
 80006a4:	2b19      	cmp	r3, #25
 80006a6:	bf88      	it	hi
 80006a8:	4770      	bxhi	lr
 80006aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b6:	bf18      	it	ne
 80006b8:	4240      	negne	r0, r0
 80006ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c6:	bf18      	it	ne
 80006c8:	4249      	negne	r1, r1
 80006ca:	ea92 0f03 	teq	r2, r3
 80006ce:	d03f      	beq.n	8000750 <__addsf3+0xd8>
 80006d0:	f1a2 0201 	sub.w	r2, r2, #1
 80006d4:	fa41 fc03 	asr.w	ip, r1, r3
 80006d8:	eb10 000c 	adds.w	r0, r0, ip
 80006dc:	f1c3 0320 	rsb	r3, r3, #32
 80006e0:	fa01 f103 	lsl.w	r1, r1, r3
 80006e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e8:	d502      	bpl.n	80006f0 <__addsf3+0x78>
 80006ea:	4249      	negs	r1, r1
 80006ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f4:	d313      	bcc.n	800071e <__addsf3+0xa6>
 80006f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fa:	d306      	bcc.n	800070a <__addsf3+0x92>
 80006fc:	0840      	lsrs	r0, r0, #1
 80006fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000702:	f102 0201 	add.w	r2, r2, #1
 8000706:	2afe      	cmp	r2, #254	; 0xfe
 8000708:	d251      	bcs.n	80007ae <__addsf3+0x136>
 800070a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000712:	bf08      	it	eq
 8000714:	f020 0001 	biceq.w	r0, r0, #1
 8000718:	ea40 0003 	orr.w	r0, r0, r3
 800071c:	4770      	bx	lr
 800071e:	0049      	lsls	r1, r1, #1
 8000720:	eb40 0000 	adc.w	r0, r0, r0
 8000724:	3a01      	subs	r2, #1
 8000726:	bf28      	it	cs
 8000728:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800072c:	d2ed      	bcs.n	800070a <__addsf3+0x92>
 800072e:	fab0 fc80 	clz	ip, r0
 8000732:	f1ac 0c08 	sub.w	ip, ip, #8
 8000736:	ebb2 020c 	subs.w	r2, r2, ip
 800073a:	fa00 f00c 	lsl.w	r0, r0, ip
 800073e:	bfaa      	itet	ge
 8000740:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000744:	4252      	neglt	r2, r2
 8000746:	4318      	orrge	r0, r3
 8000748:	bfbc      	itt	lt
 800074a:	40d0      	lsrlt	r0, r2
 800074c:	4318      	orrlt	r0, r3
 800074e:	4770      	bx	lr
 8000750:	f092 0f00 	teq	r2, #0
 8000754:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000758:	bf06      	itte	eq
 800075a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075e:	3201      	addeq	r2, #1
 8000760:	3b01      	subne	r3, #1
 8000762:	e7b5      	b.n	80006d0 <__addsf3+0x58>
 8000764:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000768:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800076c:	bf18      	it	ne
 800076e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000772:	d021      	beq.n	80007b8 <__addsf3+0x140>
 8000774:	ea92 0f03 	teq	r2, r3
 8000778:	d004      	beq.n	8000784 <__addsf3+0x10c>
 800077a:	f092 0f00 	teq	r2, #0
 800077e:	bf08      	it	eq
 8000780:	4608      	moveq	r0, r1
 8000782:	4770      	bx	lr
 8000784:	ea90 0f01 	teq	r0, r1
 8000788:	bf1c      	itt	ne
 800078a:	2000      	movne	r0, #0
 800078c:	4770      	bxne	lr
 800078e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000792:	d104      	bne.n	800079e <__addsf3+0x126>
 8000794:	0040      	lsls	r0, r0, #1
 8000796:	bf28      	it	cs
 8000798:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800079c:	4770      	bx	lr
 800079e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007a2:	bf3c      	itt	cc
 80007a4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a8:	4770      	bxcc	lr
 80007aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b6:	4770      	bx	lr
 80007b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007bc:	bf16      	itet	ne
 80007be:	4608      	movne	r0, r1
 80007c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c4:	4601      	movne	r1, r0
 80007c6:	0242      	lsls	r2, r0, #9
 80007c8:	bf06      	itte	eq
 80007ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ce:	ea90 0f01 	teqeq	r0, r1
 80007d2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d6:	4770      	bx	lr

080007d8 <__aeabi_ui2f>:
 80007d8:	f04f 0300 	mov.w	r3, #0
 80007dc:	e004      	b.n	80007e8 <__aeabi_i2f+0x8>
 80007de:	bf00      	nop

080007e0 <__aeabi_i2f>:
 80007e0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e4:	bf48      	it	mi
 80007e6:	4240      	negmi	r0, r0
 80007e8:	ea5f 0c00 	movs.w	ip, r0
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f4:	4601      	mov	r1, r0
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	e01c      	b.n	8000836 <__aeabi_l2f+0x2a>

080007fc <__aeabi_ul2f>:
 80007fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000800:	bf08      	it	eq
 8000802:	4770      	bxeq	lr
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e00a      	b.n	8000820 <__aeabi_l2f+0x14>
 800080a:	bf00      	nop

0800080c <__aeabi_l2f>:
 800080c:	ea50 0201 	orrs.w	r2, r0, r1
 8000810:	bf08      	it	eq
 8000812:	4770      	bxeq	lr
 8000814:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000818:	d502      	bpl.n	8000820 <__aeabi_l2f+0x14>
 800081a:	4240      	negs	r0, r0
 800081c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000820:	ea5f 0c01 	movs.w	ip, r1
 8000824:	bf02      	ittt	eq
 8000826:	4684      	moveq	ip, r0
 8000828:	4601      	moveq	r1, r0
 800082a:	2000      	moveq	r0, #0
 800082c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000830:	bf08      	it	eq
 8000832:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000836:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800083a:	fabc f28c 	clz	r2, ip
 800083e:	3a08      	subs	r2, #8
 8000840:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000844:	db10      	blt.n	8000868 <__aeabi_l2f+0x5c>
 8000846:	fa01 fc02 	lsl.w	ip, r1, r2
 800084a:	4463      	add	r3, ip
 800084c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000850:	f1c2 0220 	rsb	r2, r2, #32
 8000854:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000858:	fa20 f202 	lsr.w	r2, r0, r2
 800085c:	eb43 0002 	adc.w	r0, r3, r2
 8000860:	bf08      	it	eq
 8000862:	f020 0001 	biceq.w	r0, r0, #1
 8000866:	4770      	bx	lr
 8000868:	f102 0220 	add.w	r2, r2, #32
 800086c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000870:	f1c2 0220 	rsb	r2, r2, #32
 8000874:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000878:	fa21 f202 	lsr.w	r2, r1, r2
 800087c:	eb43 0002 	adc.w	r0, r3, r2
 8000880:	bf08      	it	eq
 8000882:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000886:	4770      	bx	lr

08000888 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4313      	orrs	r3, r2
 800089a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800089e:	699a      	ldr	r2, [r3, #24]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	615a      	str	r2, [r3, #20]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
	...

080008d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80008ec:	2010      	movs	r0, #16
 80008ee:	f7ff ffcb 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80008f2:	2020      	movs	r0, #32
 80008f4:	f7ff ffc8 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80008f8:	2008      	movs	r0, #8
 80008fa:	f7ff ffc5 	bl	8000888 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80008fe:	2004      	movs	r0, #4
 8000900:	f7ff ffc2 	bl	8000888 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8000904:	490b      	ldr	r1, [pc, #44]	; (8000934 <MX_GPIO_Init+0x5c>)
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0x60>)
 8000908:	f7ff ffd6 	bl	80008b8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x5c>)
 800090e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000910:	2301      	movs	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0x60>)
 8000926:	f001 ff62 	bl	80027ee <LL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	04200020 	.word	0x04200020
 8000938:	40011000 	.word	0x40011000

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	6039      	str	r1, [r7, #0]
 800099a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db0a      	blt.n	80009ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <__NVIC_SetPriority+0x4c>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	440b      	add	r3, r1
 80009b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b8:	e00a      	b.n	80009d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4908      	ldr	r1, [pc, #32]	; (80009e0 <__NVIC_SetPriority+0x50>)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	3b04      	subs	r3, #4
 80009c8:	0112      	lsls	r2, r2, #4
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	440b      	add	r3, r1
 80009ce:	761a      	strb	r2, [r3, #24]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	; 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	f1c3 0307 	rsb	r3, r3, #7
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	bf28      	it	cs
 8000a02:	2304      	movcs	r3, #4
 8000a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	d902      	bls.n	8000a14 <NVIC_EncodePriority+0x30>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3b03      	subs	r3, #3
 8000a12:	e000      	b.n	8000a16 <NVIC_EncodePriority+0x32>
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	2201      	movs	r2, #1
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	401a      	ands	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	1e59      	subs	r1, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
         );
 8000a38:	4313      	orrs	r3, r2
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	f023 0201 	bic.w	r2, r3, #1
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
	...

08000ac4 <LL_APB1_GRP1_EnableClock>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ada:	69da      	ldr	r2, [r3, #28]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <LL_APB2_GRP1_EnableClock>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000afe:	699a      	ldr	r2, [r3, #24]
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000b4a:	2008      	movs	r0, #8
 8000b4c:	f7ff ffd2 	bl	8000af4 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000b50:	f24c 03c0 	movw	r3, #49344	; 0xc0c0
 8000b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b56:	2309      	movs	r3, #9
 8000b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <MX_I2C1_Init+0xbc>)
 8000b68:	f001 fe41 	bl	80027ee <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000b6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b70:	f7ff ffa8 	bl	8000ac4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000b74:	f7ff fee2 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff30 	bl	80009e4 <NVIC_EncodePriority>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4619      	mov	r1, r3
 8000b88:	201f      	movs	r0, #31
 8000b8a:	f7ff ff01 	bl	8000990 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b8e:	201f      	movs	r0, #31
 8000b90:	f7ff fee2 	bl	8000958 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_I2C1_Init+0xc0>)
 8000b96:	f7ff ff85 	bl	8000aa4 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_I2C1_Init+0xc0>)
 8000b9c:	f7ff ff61 	bl	8000a62 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <MX_I2C1_Init+0xc0>)
 8000ba2:	f7ff ff4f 	bl	8000a44 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C1_Init+0xc4>)
 8000bac:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000bbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_I2C1_Init+0xc0>)
 8000bca:	f001 ff65 	bl	8002a98 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2C1_Init+0xc0>)
 8000bd2:	f7ff ff55 	bl	8000a80 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40005400 	.word	0x40005400
 8000be8:	00061a80 	.word	0x00061a80

08000bec <__NVIC_SetPriorityGrouping>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cea:	2101      	movs	r1, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	1e59      	subs	r1, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
         );
 8000cf8:	4313      	orrs	r3, r2
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d28:	f7ff ff92 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <LL_RCC_HSE_Enable+0x18>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <LL_RCC_HSE_Enable+0x18>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000

08000d64 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <LL_RCC_HSE_IsReady+0x20>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d74:	bf0c      	ite	eq
 8000d76:	2301      	moveq	r3, #1
 8000d78:	2300      	movne	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000

08000d88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <LL_RCC_SetSysClkSource+0x24>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f023 0203 	bic.w	r2, r3, #3
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <LL_RCC_SetSysClkSource+0x24>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <LL_RCC_GetSysClkSource+0x14>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <LL_RCC_SetAHBPrescaler+0x24>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <LL_RCC_SetAHBPrescaler+0x24>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e28:	4904      	ldr	r1, [pc, #16]	; (8000e3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <LL_RCC_PLL_Enable+0x18>)
 8000e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000

08000e5c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_RCC_PLL_IsReady+0x20>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	4903      	ldr	r1, [pc, #12]	; (8000eac <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_APB1_GRP1_EnableClock>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LL_APB2_GRP1_EnableClock>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4013      	ands	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_FLASH_SetLatency+0x24>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 0207 	bic.w	r2, r3, #7
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <LL_FLASH_SetLatency+0x24>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000

08000f38 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <LL_FLASH_GetLatency+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0307 	and.w	r3, r3, #7
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40022000 	.word	0x40022000

08000f50 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	041a      	lsls	r2, r3, #16
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	400b      	ands	r3, r1
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	6053      	str	r3, [r2, #4]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <_ZN6events6Event8C1ERKh>:

namespace events {

	class Event8 {
	public:
		Event8( const unsigned char& t )
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
		: target(t-1){}
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	705a      	strb	r2, [r3, #1]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	709a      	strb	r2, [r3, #2]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <_ZN6events6Event84tickEv>:

		void tick(){
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
			if ( cnt < target ){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d206      	bcs.n	8000ff8 <_ZN6events6Event84tickEv+0x22>
				cnt++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	701a      	strb	r2, [r3, #0]
			} else {
				trigger=true;
			}
		}
 8000ff6:	e002      	b.n	8000ffe <_ZN6events6Event84tickEv+0x28>
				trigger=true;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	709a      	strb	r2, [r3, #2]
		}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <_ZN6events6Event85clearEv>:

		void clear() {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
			trigger=false;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	709a      	strb	r2, [r3, #2]
			cnt=0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
		}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <_ZN6events6Event84flagEv>:

		const bool flag(){
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
			return trigger;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	789b      	ldrb	r3, [r3, #2]
		}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <_ZN6events7Event16C1ERKj>:



	class Event16 {
	public:
		Event16( const unsigned int& t )
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
		: target(t-1){}
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	721a      	strb	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <_ZN6events7Event164tickEv>:

		void tick(){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
			if ( cnt < target ){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	d205      	bcs.n	8001088 <_ZN6events7Event164tickEv+0x20>
				cnt++;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]
			} else {
				trigger=true;
			}
		}
 8001086:	e002      	b.n	800108e <_ZN6events7Event164tickEv+0x26>
				trigger=true;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	721a      	strb	r2, [r3, #8]
		}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <_ZN6events7Event165clearEv>:

		void clear() {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
			trigger=false;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	721a      	strb	r2, [r3, #8]
			cnt=0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
		}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <_ZN6events7Event164flagEv>:

		const bool flag(){
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
			return trigger;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7a1b      	ldrb	r3, [r3, #8]
		}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <_ZN7GlobalsC1Ev>:


}


class Globals {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3308      	adds	r3, #8


	uint16_t i{0};
	uint32_t millis{0};

	events::Event8  time10{10};
 80010e4:	220a      	movs	r2, #10
class Globals {
 80010e6:	72ba      	strb	r2, [r7, #10]
 80010e8:	f107 020a 	add.w	r2, r7, #10
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff5a 	bl	8000fa8 <_ZN6events6Event8C1ERKh>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	330b      	adds	r3, #11
	events::Event8  time100{100};
 80010f8:	2264      	movs	r2, #100	; 0x64
class Globals {
 80010fa:	72fa      	strb	r2, [r7, #11]
 80010fc:	f107 020b 	add.w	r2, r7, #11
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff50 	bl	8000fa8 <_ZN6events6Event8C1ERKh>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3310      	adds	r3, #16
	events::Event16 time1000{1000};
 800110c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class Globals {
 8001110:	60fa      	str	r2, [r7, #12]
 8001112:	f107 020c 	add.w	r2, r7, #12
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff8f 	bl	800103c <_ZN6events7Event16C1ERKj>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	331c      	adds	r3, #28
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f93c 	bl	80013a0 <_ZN3def4SbusC1Ev>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff fed1 	bl	8000ee0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800113e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001142:	f7ff feb5 	bl	8000eb0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff fd50 	bl	8000bec <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800114c:	f7ff fd72 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8001150:	4603      	mov	r3, r0
 8001152:	2200      	movs	r2, #0
 8001154:	210f      	movs	r1, #15
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fda4 	bl	8000ca4 <NVIC_EncodePriority>
 800115c:	4603      	mov	r3, r0
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	f7ff fd74 	bl	8000c50 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001168:	f7ff ff0e 	bl	8000f88 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f840 	bl	80011f0 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  SystemCoreClockUpdate();
 8001170:	f000 fe4a 	bl	8001e08 <SystemCoreClockUpdate>
  SysTick_Config(SystemCoreClock/1000);
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <main+0xa0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <main+0xa4>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	099b      	lsrs	r3, r3, #6
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdbf 	bl	8000d04 <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f7ff fba7 	bl	80008d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800118a:	f001 f941 	bl	8002410 <MX_USART1_UART_Init>
  //MX_USART3_UART_Init();
  MX_I2C1_Init();
 800118e:	f7ff fcc9 	bl	8000b24 <MX_I2C1_Init>
  while (1)
  {


	// Event 10ms:
	if ( G.time10.flag() ) {
 8001192:	4812      	ldr	r0, [pc, #72]	; (80011dc <main+0xa8>)
 8001194:	f7ff ff47 	bl	8001026 <_ZN6events6Event84flagEv>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <main+0x70>


		G.time10.clear();
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <main+0xa8>)
 80011a0:	f7ff ff32 	bl	8001008 <_ZN6events6Event85clearEv>
	}

	// Event 100ms:
	if ( G.time100.flag() ) {
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <main+0xac>)
 80011a6:	f7ff ff3e 	bl	8001026 <_ZN6events6Event84flagEv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <main+0x8a>

		LL_GPIO_TogglePin( GPIOC, LL_GPIO_PIN_13 );
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <main+0xb0>)
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <main+0xb4>)
 80011b4:	f7ff fecc 	bl	8000f50 <LL_GPIO_TogglePin>

		G.time100.clear();
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <main+0xac>)
 80011ba:	f7ff ff25 	bl	8001008 <_ZN6events6Event85clearEv>
	}

	// Event 1000ms:
	if ( G.time1000.flag() ) {
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <main+0xb8>)
 80011c0:	f7ff ff79 	bl	80010b6 <_ZN6events7Event164flagEv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0e3      	beq.n	8001192 <main+0x5e>

		G.time1000.clear();
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <main+0xb8>)
 80011cc:	f7ff ff64 	bl	8001098 <_ZN6events7Event165clearEv>
	if ( G.time10.flag() ) {
 80011d0:	e7df      	b.n	8001192 <main+0x5e>
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000
 80011d8:	10624dd3 	.word	0x10624dd3
 80011dc:	2000008c 	.word	0x2000008c
 80011e0:	2000008f 	.word	0x2000008f
 80011e4:	04200020 	.word	0x04200020
 80011e8:	40011000 	.word	0x40011000
 80011ec:	20000094 	.word	0x20000094

080011f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f7ff fe8b 	bl	8000f10 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80011fa:	f7ff fe9d 	bl	8000f38 <LL_FLASH_GetLatency>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b02      	cmp	r3, #2
 8001202:	bf14      	ite	ne
 8001204:	2301      	movne	r3, #1
 8001206:	2300      	moveq	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d000      	beq.n	8001210 <_Z18SystemClock_Configv+0x20>
 800120e:	e7f4      	b.n	80011fa <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_RCC_HSE_Enable();
 8001210:	f7ff fd9a 	bl	8000d48 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001214:	f7ff fda6 	bl	8000d64 <LL_RCC_HSE_IsReady>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d000      	beq.n	800122a <_Z18SystemClock_Configv+0x3a>
 8001228:	e7f4      	b.n	8001214 <_Z18SystemClock_Configv+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800122a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800122e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001232:	f7ff fe25 	bl	8000e80 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001236:	f7ff fe03 	bl	8000e40 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800123a:	f7ff fe0f 	bl	8000e5c <LL_RCC_PLL_IsReady>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <_Z18SystemClock_Configv+0x60>
 800124e:	e7f4      	b.n	800123a <_Z18SystemClock_Configv+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fdb9 	bl	8000dc8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001256:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800125a:	f7ff fdc9 	bl	8000df0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fdda 	bl	8000e18 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fd8f 	bl	8000d88 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800126a:	f7ff fda1 	bl	8000db0 <LL_RCC_GetSysClkSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b08      	cmp	r3, #8
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d000      	beq.n	8001280 <_Z18SystemClock_Configv+0x90>
 800127e:	e7f4      	b.n	800126a <_Z18SystemClock_Configv+0x7a>
  {

  }
  LL_Init1msTick(72000000);
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <_Z18SystemClock_Configv+0xa0>)
 8001282:	f001 fe5d 	bl	8002f40 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001286:	4802      	ldr	r0, [pc, #8]	; (8001290 <_Z18SystemClock_Configv+0xa0>)
 8001288:	f001 fe68 	bl	8002f5c <LL_SetSystemCoreClock>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	044aa200 	.word	0x044aa200

08001294 <IncrementSystemTick_Callback>:

/* USER CODE BEGIN 4 */

void IncrementSystemTick_Callback(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

	G.time10.tick();
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <IncrementSystemTick_Callback+0x24>)
 800129a:	f7ff fe9c 	bl	8000fd6 <_ZN6events6Event84tickEv>
	G.time100.tick();
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <IncrementSystemTick_Callback+0x28>)
 80012a0:	f7ff fe99 	bl	8000fd6 <_ZN6events6Event84tickEv>
	G.time1000.tick();
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <IncrementSystemTick_Callback+0x2c>)
 80012a6:	f7ff fedf 	bl	8001068 <_ZN6events7Event164tickEv>

	// Event 1ms:
	G.millis++;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <IncrementSystemTick_Callback+0x30>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <IncrementSystemTick_Callback+0x30>)
 80012b2:	6053      	str	r3, [r2, #4]

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000008c 	.word	0x2000008c
 80012bc:	2000008f 	.word	0x2000008f
 80012c0:	20000094 	.word	0x20000094
 80012c4:	20000084 	.word	0x20000084

080012c8 <_ZN7GlobalsD1Ev>:
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	331c      	adds	r3, #28
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f89f 	bl	8001418 <_ZN3def4SbusD1Ev>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_Z41__static_initialization_and_destruction_0ii>:
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d115      	bne.n	8001320 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d110      	bne.n	8001320 <_Z41__static_initialization_and_destruction_0ii+0x3c>


};


inline Globals G;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800131c:	f7ff fed6 	bl	80010cc <_ZN7GlobalsC1Ev>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132c:	4293      	cmp	r3, r2
 800132e:	d110      	bne.n	8001352 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800134e:	f7ff ffbb 	bl	80012c8 <_ZN7GlobalsD1Ev>
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000010c 	.word	0x2000010c
 8001360:	20000084 	.word	0x20000084

08001364 <_GLOBAL__sub_I_main>:
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
 8001368:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff ffb9 	bl	80012e4 <_Z41__static_initialization_and_destruction_0ii>
 8001372:	bd80      	pop	{r7, pc}

08001374 <_GLOBAL__sub_D_main>:
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
 8001378:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ffb1 	bl	80012e4 <_Z41__static_initialization_and_destruction_0ii>
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZN3def3def7ChannelaSERKj>:
			const unsigned int operator() ()
			{
				return value;
			}

			void operator=( const unsigned int& val )
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
			{
				value = val;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
			}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <_ZN3def4SbusC1Ev>:

#include <sbus.h>

using namespace def;

Sbus::Sbus() {
 80013a0:	b4b0      	push	{r4, r5, r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <_ZN3def4SbusC1Ev+0x70>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	711a      	strb	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	715a      	strb	r2, [r3, #5]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	719a      	strb	r2, [r3, #6]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	71da      	strb	r2, [r3, #7]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	330c      	adds	r3, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	761a      	strb	r2, [r3, #24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <_ZN3def4SbusC1Ev+0x74>)
 80013ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80013ee:	4615      	mov	r5, r2
 80013f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// TODO Auto-generated constructor stub

}
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bcb0      	pop	{r4, r5, r7}
 800140e:	4770      	bx	lr
 8001410:	080030e4 	.word	0x080030e4
 8001414:	0800309c 	.word	0x0800309c

08001418 <_ZN3def4SbusD1Ev>:

Sbus::~Sbus() {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <_ZN3def4SbusD1Ev+0x1c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	080030e4 	.word	0x080030e4

08001438 <_ZN3def4SbusD0Ev>:
Sbus::~Sbus() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
}
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe9 	bl	8001418 <_ZN3def4SbusD1Ev>
 8001446:	216c      	movs	r1, #108	; 0x6c
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 fd95 	bl	8002f78 <_ZdlPvj>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_ZN3def4Sbus8sbus2pwmERKj>:


const unsigned int Sbus::sbus2pwm( const unsigned int& sbus )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	const float a = 894.384;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_ZN3def4Sbus8sbus2pwmERKj+0x58>)
 8001464:	60fb      	str	r3, [r7, #12]
	const float b = 0.610501;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <_ZN3def4Sbus8sbus2pwmERKj+0x5c>)
 8001468:	60bb      	str	r3, [r7, #8]

	// extra term is for proper rounding
	// otherwise it gets rounded down always
	return static_cast<unsigned int>( a + b*sbus + (0.5-(sbus<0)) );
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f9b2 	bl	80007d8 <__aeabi_ui2f>
 8001474:	4603      	mov	r3, r0
 8001476:	490f      	ldr	r1, [pc, #60]	; (80014b4 <_ZN3def4Sbus8sbus2pwmERKj+0x5c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe67 	bl	800014c <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	490b      	ldr	r1, [pc, #44]	; (80014b0 <_ZN3def4Sbus8sbus2pwmERKj+0x58>)
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f8f8 	bl	8000678 <__addsf3>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f876 	bl	800057c <__aeabi_f2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_ZN3def4Sbus8sbus2pwmERKj+0x60>)
 8001496:	f7fe ff13 	bl	80002c0 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff f8c3 	bl	800062c <__aeabi_d2uiz>
 80014a6:	4603      	mov	r3, r0

}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	445f9893 	.word	0x445f9893
 80014b4:	3f1c49cb 	.word	0x3f1c49cb
 80014b8:	3fe00000 	.word	0x3fe00000

080014bc <_ZN3def4Sbus14decodeChannelsEv>:

void Sbus::decodeChannels(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0a6      	sub	sp, #152	; 0x98
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	//if ((buffer[23] >> 2) & 0x0001) {
	//	lost++;
	//	return false;
	//}

	Channel[0]  = sbus2pwm((buffer[1]    |buffer[2]<<8)                 & 0x07FF);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7b5b      	ldrb	r3, [r3, #13]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7b9b      	ldrb	r3, [r3, #14]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	4313      	orrs	r3, r2
 80014d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffba 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	332c      	adds	r3, #44	; 0x2c
 80014ec:	f107 0208 	add.w	r2, r7, #8
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff46 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[1]  = sbus2pwm((buffer[2]>>3 |buffer[3]<<5)                 & 0x07FF);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7bdb      	ldrb	r3, [r3, #15]
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	4313      	orrs	r3, r2
 800150a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff9e 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 800151c:	4603      	mov	r3, r0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3330      	adds	r3, #48	; 0x30
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff2a 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[2]  = sbus2pwm((buffer[3]>>6 |buffer[4]<<2 |buffer[5]<<10)  & 0x07FF);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7bdb      	ldrb	r3, [r3, #15]
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7c1b      	ldrb	r3, [r3, #16]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7c5b      	ldrb	r3, [r3, #17]
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4313      	orrs	r3, r2
 800154a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff7e 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 800155c:	4603      	mov	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3334      	adds	r3, #52	; 0x34
 8001564:	f107 0218 	add.w	r2, r7, #24
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff0a 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[3]  = sbus2pwm((buffer[5]>>1 |buffer[6]<<7)                 & 0x07FF);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c5b      	ldrb	r3, [r3, #17]
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7c9b      	ldrb	r3, [r3, #18]
 800157e:	01db      	lsls	r3, r3, #7
 8001580:	4313      	orrs	r3, r2
 8001582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff62 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001594:	4603      	mov	r3, r0
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3338      	adds	r3, #56	; 0x38
 800159c:	f107 0220 	add.w	r2, r7, #32
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff feee 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[4]  = sbus2pwm((buffer[6]>>4 |buffer[7]<<4)                 & 0x07FF);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7c9b      	ldrb	r3, [r3, #18]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7cdb      	ldrb	r3, [r3, #19]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4313      	orrs	r3, r2
 80015ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff46 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 80015cc:	4603      	mov	r3, r0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	333c      	adds	r3, #60	; 0x3c
 80015d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fed2 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[5]  = sbus2pwm((buffer[7]>>7 |buffer[8]<<1 |buffer[9]<<9)   & 0x07FF);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7cdb      	ldrb	r3, [r3, #19]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7d1b      	ldrb	r3, [r3, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7d5b      	ldrb	r3, [r3, #21]
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff26 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 800160c:	4603      	mov	r3, r0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3340      	adds	r3, #64	; 0x40
 8001614:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff feb2 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[6]  = sbus2pwm((buffer[9]>>2 |buffer[10]<<6)                & 0x07FF);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7d5b      	ldrb	r3, [r3, #21]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7d9b      	ldrb	r3, [r3, #22]
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	4313      	orrs	r3, r2
 8001632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001638:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff0a 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001644:	4603      	mov	r3, r0
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3344      	adds	r3, #68	; 0x44
 800164c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe96 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[7]  = sbus2pwm((buffer[10]>>5|buffer[11]<<3)                & 0x07FF);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7d9b      	ldrb	r3, [r3, #22]
 800165c:	095b      	lsrs	r3, r3, #5
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7ddb      	ldrb	r3, [r3, #23]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4313      	orrs	r3, r2
 800166a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
 8001670:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff feee 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 800167c:	4603      	mov	r3, r0
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3348      	adds	r3, #72	; 0x48
 8001684:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fe7a 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[8]  = sbus2pwm((buffer[12]   |buffer[13]<<8)                & 0x07FF);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7e5b      	ldrb	r3, [r3, #25]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	4313      	orrs	r3, r2
 800169e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fed4 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 80016b0:	4603      	mov	r3, r0
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	334c      	adds	r3, #76	; 0x4c
 80016b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe60 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[9]  = sbus2pwm((buffer[13]>>3|buffer[14]<<5)                & 0x07FF);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e5b      	ldrb	r3, [r3, #25]
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e9b      	ldrb	r3, [r3, #26]
 80016d2:	015b      	lsls	r3, r3, #5
 80016d4:	4313      	orrs	r3, r2
 80016d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016da:	657b      	str	r3, [r7, #84]	; 0x54
 80016dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff feb8 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 80016e8:	4603      	mov	r3, r0
 80016ea:	653b      	str	r3, [r7, #80]	; 0x50
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3350      	adds	r3, #80	; 0x50
 80016f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe44 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[10] = sbus2pwm((buffer[14]>>6|buffer[15]<<2|buffer[16]<<10) & 0x07FF);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e9b      	ldrb	r3, [r3, #26]
 8001700:	099b      	lsrs	r3, r3, #6
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7edb      	ldrb	r3, [r3, #27]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f1b      	ldrb	r3, [r3, #28]
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4313      	orrs	r3, r2
 8001716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800171a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800171c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe98 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001728:	4603      	mov	r3, r0
 800172a:	65bb      	str	r3, [r7, #88]	; 0x58
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3354      	adds	r3, #84	; 0x54
 8001730:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fe24 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[11] = sbus2pwm((buffer[16]>>1|buffer[17]<<7)                & 0x07FF);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7f1b      	ldrb	r3, [r3, #28]
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7f5b      	ldrb	r3, [r3, #29]
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	4313      	orrs	r3, r2
 800174e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001752:	667b      	str	r3, [r7, #100]	; 0x64
 8001754:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fe7c 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001760:	4603      	mov	r3, r0
 8001762:	663b      	str	r3, [r7, #96]	; 0x60
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3358      	adds	r3, #88	; 0x58
 8001768:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe08 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[12] = sbus2pwm((buffer[17]>>4|buffer[18]<<4)                & 0x07FF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7f5b      	ldrb	r3, [r3, #29]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7f9b      	ldrb	r3, [r3, #30]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4313      	orrs	r3, r2
 8001786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800178c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fe60 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001798:	4603      	mov	r3, r0
 800179a:	66bb      	str	r3, [r7, #104]	; 0x68
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	335c      	adds	r3, #92	; 0x5c
 80017a0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdec 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[13] = sbus2pwm((buffer[18]>>7|buffer[19]<<1|buffer[20]<<9)  & 0x07FF);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7f9b      	ldrb	r3, [r3, #30]
 80017b0:	09db      	lsrs	r3, r3, #7
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7fdb      	ldrb	r3, [r3, #31]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017cc:	677b      	str	r3, [r7, #116]	; 0x74
 80017ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fe3f 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 80017da:	4603      	mov	r3, r0
 80017dc:	673b      	str	r3, [r7, #112]	; 0x70
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3360      	adds	r3, #96	; 0x60
 80017e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fdcb 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[14] = sbus2pwm((buffer[20]>>2|buffer[21]<<6)                & 0x07FF);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	4313      	orrs	r3, r2
 8001804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001808:	67fb      	str	r3, [r7, #124]	; 0x7c
 800180a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fe21 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001816:	4603      	mov	r3, r0
 8001818:	67bb      	str	r3, [r7, #120]	; 0x78
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3364      	adds	r3, #100	; 0x64
 800181e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fdad 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	Channel[15] = sbus2pwm((buffer[21]>>5|buffer[22]<<3)                & 0x07FF);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4313      	orrs	r3, r2
 8001840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001848:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fe02 	bl	8001458 <_ZN3def4Sbus8sbus2pwmERKj>
 8001854:	4603      	mov	r3, r0
 8001856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3368      	adds	r3, #104	; 0x68
 800185e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fd8d 	bl	8001384 <_ZN3def3def7ChannelaSERKj>

	( (buffer[23])      & 0x0001) ? Channel[16] = 2047: Channel[16] = 0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <_ZN3def4Sbus14decodeChannelsEv+0x3d6>
 8001878:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800187c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	336c      	adds	r3, #108	; 0x6c
 8001884:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fd7a 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
 8001890:	e00a      	b.n	80018a8 <_ZN3def4Sbus14decodeChannelsEv+0x3ec>
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	336c      	adds	r3, #108	; 0x6c
 800189c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fd6e 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
	( (buffer[23] >> 1) & 0x0001) ? Channel[17] = 2047: Channel[17] = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <_ZN3def4Sbus14decodeChannelsEv+0x418>
 80018ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3370      	adds	r3, #112	; 0x70
 80018c6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd59 	bl	8001384 <_ZN3def3def7ChannelaSERKj>
 80018d2:	e00a      	b.n	80018ea <_ZN3def4Sbus14decodeChannelsEv+0x42e>
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3370      	adds	r3, #112	; 0x70
 80018de:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd4d 	bl	8001384 <_ZN3def3def7ChannelaSERKj>

	if ((buffer[23] >> 3) & 0x0001) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <_ZN3def4Sbus14decodeChannelsEv+0x448>
		failsafe = true;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	71da      	strb	r2, [r3, #7]
	} else {
		failsafe = false;
	}

}
 8001902:	e002      	b.n	800190a <_ZN3def4Sbus14decodeChannelsEv+0x44e>
		failsafe = false;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	71da      	strb	r2, [r3, #7]
}
 800190a:	bf00      	nop
 800190c:	3798      	adds	r7, #152	; 0x98
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZN3def4Sbus13readSbusFrameEv>:

void Sbus::readSbusFrame()
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	if ( buffer[0] == START_BYTE && buffer[SBUS_FRAME_LEN-1] == END_BYTE ) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7b1b      	ldrb	r3, [r3, #12]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	d10b      	bne.n	800193a <_ZN3def4Sbus13readSbusFrameEv+0x28>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <_ZN3def4Sbus13readSbusFrameEv+0x28>
		decodeChannels();
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fdc5 	bl	80014bc <_ZN3def4Sbus14decodeChannelsEv>
		synced=true;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	719a      	strb	r2, [r3, #6]
 8001938:	e008      	b.n	800194c <_ZN3def4Sbus13readSbusFrameEv+0x3a>
	} else {
		synced=false;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	719a      	strb	r2, [r3, #6]
		lost++;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
	}

}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZN3def4Sbus8findSyncERKh>:

void Sbus::findSync( const unsigned char& byte )
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	if ( !reading && byte == START_BYTE ) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	f083 0301 	eor.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <_ZN3def4Sbus8findSyncERKh+0x2c>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d105      	bne.n	8001980 <_ZN3def4Sbus8findSyncERKh+0x2c>
		reading=true;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	715a      	strb	r2, [r3, #5]
		i_buf=0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	711a      	strb	r2, [r3, #4]
	}

	if ( reading ){
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	795b      	ldrb	r3, [r3, #5]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <_ZN3def4Sbus8findSyncERKh+0x5c>


		if ( byte == END_BYTE && i_buf == SBUS_FRAME_LEN - 1 ) {
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <_ZN3def4Sbus8findSyncERKh+0x50>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	2b18      	cmp	r3, #24
 8001996:	d105      	bne.n	80019a4 <_ZN3def4Sbus8findSyncERKh+0x50>
			synced=true;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	719a      	strb	r2, [r3, #6]
			reading=false;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	715a      	strb	r2, [r3, #5]
		}

		i_buf++;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	3301      	adds	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	711a      	strb	r2, [r3, #4]
	}
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <_ZN3def4Sbus8isSyncedEv>:


const bool Sbus::isSynced()
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	return synced;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	799b      	ldrb	r3, [r3, #6]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LL_DMA_EnableChannel+0x38>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	3a01      	subs	r2, #1
 80019ee:	4906      	ldr	r1, [pc, #24]	; (8001a08 <LL_DMA_EnableChannel+0x38>)
 80019f0:	5c8a      	ldrb	r2, [r1, r2]
 80019f2:	4611      	mov	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	440a      	add	r2, r1
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	080030ec 	.word	0x080030ec

08001a0c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LL_DMA_DisableChannel+0x38>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	4906      	ldr	r1, [pc, #24]	; (8001a44 <LL_DMA_DisableChannel+0x38>)
 8001a2c:	5c8a      	ldrb	r2, [r1, r2]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	440a      	add	r2, r1
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	080030ec 	.word	0x080030ec

08001a48 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <LL_DMA_IsActiveFlag_TE5>:
  * @rmtoll ISR          TEIF5         LL_DMA_IsActiveFlag_TE5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF5) == (DMA_ISR_TEIF5));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa2:	605a      	str	r2, [r3, #4]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <LL_DMA_IsEnabledIT_TC+0x34>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE));
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	080030ec 	.word	0x080030ec

08001ae8 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f06f 0220 	mvn.w	r2, #32
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b089      	sub	sp, #36	; 0x24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	330c      	adds	r3, #12
 8001b32:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	e853 3f00 	ldrex	r3, [r3]
 8001b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330c      	adds	r3, #12
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	61ba      	str	r2, [r7, #24]
 8001b4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	e841 2300 	strex	r3, r2, [r1]
 8001b56:	613b      	str	r3, [r7, #16]
   return(result);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d000      	beq.n	8001b6a <LL_USART_EnableIT_RXNE+0x44>
 8001b68:	e7e1      	b.n	8001b2e <LL_USART_EnableIT_RXNE+0x8>
}
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	330c      	adds	r3, #12
 8001b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	e853 3f00 	ldrex	r3, [r3]
 8001b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f023 0320 	bic.w	r3, r3, #32
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	330c      	adds	r3, #12
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	61ba      	str	r2, [r7, #24]
 8001b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b9c:	6979      	ldr	r1, [r7, #20]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	e841 2300 	strex	r3, r2, [r1]
 8001ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d000      	beq.n	8001bb8 <LL_USART_DisableIT_RXNE+0x44>
 8001bb6:	e7e1      	b.n	8001b7c <LL_USART_DisableIT_RXNE+0x8>
}
 8001bb8:	bf00      	nop
 8001bba:	3724      	adds	r7, #36	; 0x24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <NMI_Handler+0x4>

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <HardFault_Handler+0x4>

08001c0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <MemManage_Handler+0x4>

08001c10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <BusFault_Handler+0x4>

08001c16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <UsageFault_Handler+0x4>

08001c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	IncrementSystemTick_Callback();
 8001c44:	f7ff fb26 	bl	8001294 <IncrementSystemTick_Callback>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_CHANNEL_5) && LL_DMA_IsActiveFlag_TC5(DMA1)) {
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	481b      	ldr	r0, [pc, #108]	; (8001ccc <DMA1_Channel5_IRQHandler+0x74>)
 8001c60:	f7ff ff26 	bl	8001ab0 <LL_DMA_IsEnabledIT_TC>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <DMA1_Channel5_IRQHandler+0x22>
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <DMA1_Channel5_IRQHandler+0x74>)
 8001c6c:	f7ff feec 	bl	8001a48 <LL_DMA_IsActiveFlag_TC5>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <DMA1_Channel5_IRQHandler+0x22>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <DMA1_Channel5_IRQHandler+0x24>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <DMA1_Channel5_IRQHandler+0x56>

		LL_DMA_ClearFlag_TC5(DMA1);
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <DMA1_Channel5_IRQHandler+0x74>)
 8001c82:	f7ff ff07 	bl	8001a94 <LL_DMA_ClearFlag_TC5>


		// Read sbus channels
		G.Sbus.readSbusFrame();
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <DMA1_Channel5_IRQHandler+0x78>)
 8001c88:	f7ff fe43 	bl	8001912 <_ZN3def4Sbus13readSbusFrameEv>

		if ( ! G.Sbus.isSynced() ) {
 8001c8c:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <DMA1_Channel5_IRQHandler+0x78>)
 8001c8e:	f7ff fe94 	bl	80019ba <_ZN3def4Sbus8isSyncedEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d013      	beq.n	8001cc6 <DMA1_Channel5_IRQHandler+0x6e>

			// Disable DMA Ring buffer reading
			// - get re-eanbled later, when sync
			//   is found by the rxne byte checking
			//
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	480a      	ldr	r0, [pc, #40]	; (8001ccc <DMA1_Channel5_IRQHandler+0x74>)
 8001ca2:	f7ff feb3 	bl	8001a0c <LL_DMA_DisableChannel>


			// Enable USART1 RXNE to start
			// checking for sync
			//
			LL_USART_EnableIT_RXNE(USART1);
 8001ca6:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <DMA1_Channel5_IRQHandler+0x7c>)
 8001ca8:	f7ff ff3d 	bl	8001b26 <LL_USART_EnableIT_RXNE>
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cac:	e00b      	b.n	8001cc6 <DMA1_Channel5_IRQHandler+0x6e>
	} else if ( LL_DMA_IsActiveFlag_TE5(DMA1) ) {
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <DMA1_Channel5_IRQHandler+0x74>)
 8001cb0:	f7ff fedd 	bl	8001a6e <LL_DMA_IsActiveFlag_TE5>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d000      	beq.n	8001cc6 <DMA1_Channel5_IRQHandler+0x6e>
		__NOP();
 8001cc4:	bf00      	nop
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	200000a0 	.word	0x200000a0
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if (LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1) ) {
 8001cea:	4819      	ldr	r0, [pc, #100]	; (8001d50 <USART1_IRQHandler+0x6c>)
 8001cec:	f7ff ff69 	bl	8001bc2 <LL_USART_IsEnabledIT_RXNE>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <USART1_IRQHandler+0x22>
 8001cf6:	4816      	ldr	r0, [pc, #88]	; (8001d50 <USART1_IRQHandler+0x6c>)
 8001cf8:	f7ff fef6 	bl	8001ae8 <LL_USART_IsActiveFlag_RXNE>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <USART1_IRQHandler+0x22>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <USART1_IRQHandler+0x24>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01d      	beq.n	8001d48 <USART1_IRQHandler+0x64>

		LL_USART_ClearFlag_RXNE(USART1);
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <USART1_IRQHandler+0x6c>)
 8001d0e:	f7ff fefd 	bl	8001b0c <LL_USART_ClearFlag_RXNE>

		if ( ! G.Sbus.isSynced() ) {
 8001d12:	4810      	ldr	r0, [pc, #64]	; (8001d54 <USART1_IRQHandler+0x70>)
 8001d14:	f7ff fe51 	bl	80019ba <_ZN3def4Sbus8isSyncedEv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f083 0301 	eor.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <USART1_IRQHandler+0x56>

			// Try finding sync
			G.Sbus.findSync( LL_USART_ReceiveData8(USART1) );
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <USART1_IRQHandler+0x6c>)
 8001d26:	f7ff ff5e 	bl	8001be6 <LL_USART_ReceiveData8>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4808      	ldr	r0, [pc, #32]	; (8001d54 <USART1_IRQHandler+0x70>)
 8001d34:	f7ff fe0e 	bl	8001954 <_ZN3def4Sbus8findSyncERKh>

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d38:	e006      	b.n	8001d48 <USART1_IRQHandler+0x64>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8001d3a:	2105      	movs	r1, #5
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <USART1_IRQHandler+0x74>)
 8001d3e:	f7ff fe47 	bl	80019d0 <LL_DMA_EnableChannel>
			LL_USART_DisableIT_RXNE(USART1);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <USART1_IRQHandler+0x6c>)
 8001d44:	f7ff ff16 	bl	8001b74 <LL_USART_DisableIT_RXNE>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40013800 	.word	0x40013800
 8001d54:	200000a0 	.word	0x200000a0
 8001d58:	40020000 	.word	0x40020000

08001d5c <_Z41__static_initialization_and_destruction_0ii>:
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d115      	bne.n	8001d98 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d110      	bne.n	8001d98 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001d94:	f7ff f99a 	bl	80010cc <_ZN7GlobalsC1Ev>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d115      	bne.n	8001dca <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d110      	bne.n	8001dca <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001dc6:	f7ff fa7f 	bl	80012c8 <_ZN7GlobalsD1Ev>
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000010c 	.word	0x2000010c
 8001dd8:	20000084 	.word	0x20000084

08001ddc <_GLOBAL__sub_I_NMI_Handler>:
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff ffb9 	bl	8001d5c <_Z41__static_initialization_and_destruction_0ii>
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_GLOBAL__sub_D_NMI_Handler>:
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff ffb1 	bl	8001d5c <_Z41__static_initialization_and_destruction_0ii>
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <SystemCoreClockUpdate+0xd0>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d011      	beq.n	8001e4e <SystemCoreClockUpdate+0x46>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d83a      	bhi.n	8001ea6 <SystemCoreClockUpdate+0x9e>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <SystemCoreClockUpdate+0x36>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d004      	beq.n	8001e46 <SystemCoreClockUpdate+0x3e>
 8001e3c:	e033      	b.n	8001ea6 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <SystemCoreClockUpdate+0xd8>)
 8001e42:	601a      	str	r2, [r3, #0]
      break;
 8001e44:	e033      	b.n	8001eae <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001e48:	4a25      	ldr	r2, [pc, #148]	; (8001ee0 <SystemCoreClockUpdate+0xd8>)
 8001e4a:	601a      	str	r2, [r3, #0]
      break;
 8001e4c:	e02f      	b.n	8001eae <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <SystemCoreClockUpdate+0xd0>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e56:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <SystemCoreClockUpdate+0xd0>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	3302      	adds	r3, #2
 8001e68:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <SystemCoreClockUpdate+0xdc>)
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001e7a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8001e7c:	e017      	b.n	8001eae <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <SystemCoreClockUpdate+0xd0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <SystemCoreClockUpdate+0xdc>)
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001e94:	6013      	str	r3, [r2, #0]
      break;
 8001e96:	e00a      	b.n	8001eae <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <SystemCoreClockUpdate+0xd8>)
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001ea2:	6013      	str	r3, [r2, #0]
      break;
 8001ea4:	e003      	b.n	8001eae <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <SystemCoreClockUpdate+0xd8>)
 8001eaa:	601a      	str	r2, [r3, #0]
      break;
 8001eac:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <SystemCoreClockUpdate+0xd0>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <SystemCoreClockUpdate+0xe0>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <SystemCoreClockUpdate+0xd4>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	007a1200 	.word	0x007a1200
 8001ee4:	003d0900 	.word	0x003d0900
 8001ee8:	080030f4 	.word	0x080030f4

08001eec <__NVIC_GetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <__NVIC_EnableIRQ+0x34>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	; 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fda:	2101      	movs	r1, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	1e59      	subs	r1, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
         );
 8001fe8:	4313      	orrs	r3, r2
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <LL_DMA_SetDataTransferDirection>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <LL_DMA_SetDataTransferDirection+0x44>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002014:	f023 0310 	bic.w	r3, r3, #16
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	3a01      	subs	r2, #1
 800201c:	4906      	ldr	r1, [pc, #24]	; (8002038 <LL_DMA_SetDataTransferDirection+0x44>)
 800201e:	5c8a      	ldrb	r2, [r1, r2]
 8002020:	4611      	mov	r1, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	440a      	add	r2, r1
 8002026:	4611      	mov	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	0800310c 	.word	0x0800310c

0800203c <LL_DMA_SetMode>:
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3b01      	subs	r3, #1
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LL_DMA_SetMode+0x40>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 0220 	bic.w	r2, r3, #32
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3b01      	subs	r3, #1
 8002060:	4906      	ldr	r1, [pc, #24]	; (800207c <LL_DMA_SetMode+0x40>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	4619      	mov	r1, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	440b      	add	r3, r1
 800206a:	4619      	mov	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
}
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	0800310c 	.word	0x0800310c

08002080 <LL_DMA_SetPeriphIncMode>:
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3b01      	subs	r3, #1
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LL_DMA_SetPeriphIncMode+0x40>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	4906      	ldr	r1, [pc, #24]	; (80020c0 <LL_DMA_SetPeriphIncMode+0x40>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	4619      	mov	r1, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	440b      	add	r3, r1
 80020ae:	4619      	mov	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	0800310c 	.word	0x0800310c

080020c4 <LL_DMA_SetMemoryIncMode>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <LL_DMA_SetMemoryIncMode+0x40>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	461a      	mov	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	4906      	ldr	r1, [pc, #24]	; (8002104 <LL_DMA_SetMemoryIncMode+0x40>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	4619      	mov	r1, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	440b      	add	r3, r1
 80020f2:	4619      	mov	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	0800310c 	.word	0x0800310c

08002108 <LL_DMA_SetPeriphSize>:
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3b01      	subs	r3, #1
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LL_DMA_SetPeriphSize+0x40>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3b01      	subs	r3, #1
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <LL_DMA_SetPeriphSize+0x40>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	4619      	mov	r1, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	440b      	add	r3, r1
 8002136:	4619      	mov	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	0800310c 	.word	0x0800310c

0800214c <LL_DMA_SetMemorySize>:
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <LL_DMA_SetMemorySize+0x40>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	461a      	mov	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <LL_DMA_SetMemorySize+0x40>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	4619      	mov	r1, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	440b      	add	r3, r1
 800217a:	4619      	mov	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	0800310c 	.word	0x0800310c

08002190 <LL_DMA_SetChannelPriorityLevel>:
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3b01      	subs	r3, #1
 80021a0:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	4619      	mov	r1, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	440b      	add	r3, r1
 80021be:	4619      	mov	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	0800310c 	.word	0x0800310c

080021d4 <LL_DMA_SetDataLength>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <LL_DMA_SetDataLength+0x40>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	041b      	lsls	r3, r3, #16
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	3a01      	subs	r2, #1
 80021f8:	4906      	ldr	r1, [pc, #24]	; (8002214 <LL_DMA_SetDataLength+0x40>)
 80021fa:	5c8a      	ldrb	r2, [r1, r2]
 80021fc:	4611      	mov	r1, r2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	440a      	add	r2, r1
 8002202:	4611      	mov	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4313      	orrs	r3, r2
 8002208:	604b      	str	r3, [r1, #4]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	0800310c 	.word	0x0800310c

08002218 <LL_DMA_SetMemoryAddress>:
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3b01      	subs	r3, #1
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <LL_DMA_SetMemoryAddress+0x2c>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	461a      	mov	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	0800310c 	.word	0x0800310c

08002248 <LL_DMA_SetPeriphAddress>:
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <LL_DMA_SetPeriphAddress+0x2c>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	461a      	mov	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6093      	str	r3, [r2, #8]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	0800310c 	.word	0x0800310c

08002278 <LL_DMA_EnableIT_TC>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LL_DMA_EnableIT_TC+0x38>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	461a      	mov	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	3a01      	subs	r2, #1
 8002296:	4906      	ldr	r1, [pc, #24]	; (80022b0 <LL_DMA_EnableIT_TC+0x38>)
 8002298:	5c8a      	ldrb	r2, [r1, r2]
 800229a:	4611      	mov	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	440a      	add	r2, r1
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	0800310c 	.word	0x0800310c

080022b4 <LL_AHB1_GRP1_EnableClock>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4013      	ands	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000

080022e4 <LL_APB2_GRP1_EnableClock>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <LL_USART_Enable>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <LL_USART_ConfigAsyncMode>:
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	615a      	str	r2, [r3, #20]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <LL_USART_EnableIT_RXNE>:
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	330c      	adds	r3, #12
 8002368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	60bb      	str	r3, [r7, #8]
   return(result);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	330c      	adds	r3, #12
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	61ba      	str	r2, [r7, #24]
 8002382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	e841 2300 	strex	r3, r2, [r1]
 800238c:	613b      	str	r3, [r7, #16]
   return(result);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d000      	beq.n	80023a0 <LL_USART_EnableIT_RXNE+0x44>
 800239e:	e7e1      	b.n	8002364 <LL_USART_EnableIT_RXNE+0x8>
}
 80023a0:	bf00      	nop
 80023a2:	3724      	adds	r7, #36	; 0x24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <LL_USART_EnableDMAReq_RX>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b089      	sub	sp, #36	; 0x24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3314      	adds	r3, #20
 80023b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	e853 3f00 	ldrex	r3, [r3]
 80023be:	60bb      	str	r3, [r7, #8]
   return(result);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3314      	adds	r3, #20
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	61ba      	str	r2, [r7, #24]
 80023d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	613b      	str	r3, [r7, #16]
   return(result);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d000      	beq.n	80023ee <LL_USART_EnableDMAReq_RX+0x44>
 80023ec:	e7e1      	b.n	80023b2 <LL_USART_EnableDMAReq_RX+0x8>
}
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <LL_USART_DMA_GetRegAddr>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
	...

08002410 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	615a      	str	r2, [r3, #20]
 8002428:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]

  // Clock Configuration
  //
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002438:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800243c:	f7ff ff52 	bl	80022e4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002440:	2004      	movs	r0, #4
 8002442:	f7ff ff4f 	bl	80022e4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff ff34 	bl	80022b4 <LL_AHB1_GRP1_EnableClock>
  //
  //PA9   ------> USART1_TX
  //PA10   ------> USART1_RX
  //

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800244c:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <MX_USART1_UART_Init+0x168>)
 800244e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002450:	2309      	movs	r3, #9
 8002452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4846      	ldr	r0, [pc, #280]	; (800257c <MX_USART1_UART_Init+0x16c>)
 8002462:	f000 f9c4 	bl	80027ee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <MX_USART1_UART_Init+0x170>)
 8002468:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800246a:	2304      	movs	r3, #4
 800246c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4842      	ldr	r0, [pc, #264]	; (800257c <MX_USART1_UART_Init+0x16c>)
 8002474:	f000 f9bb 	bl	80027ee <LL_GPIO_Init>

  // USART1 DMA Init
  //
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002478:	2200      	movs	r2, #0
 800247a:	2105      	movs	r1, #5
 800247c:	4841      	ldr	r0, [pc, #260]	; (8002584 <MX_USART1_UART_Init+0x174>)
 800247e:	f7ff fdb9 	bl	8001ff4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_HIGH);
 8002482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002486:	2105      	movs	r1, #5
 8002488:	483e      	ldr	r0, [pc, #248]	; (8002584 <MX_USART1_UART_Init+0x174>)
 800248a:	f7ff fe81 	bl	8002190 <LL_DMA_SetChannelPriorityLevel>

  //LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_CIRCULAR);
 800248e:	2220      	movs	r2, #32
 8002490:	2105      	movs	r1, #5
 8002492:	483c      	ldr	r0, [pc, #240]	; (8002584 <MX_USART1_UART_Init+0x174>)
 8002494:	f7ff fdd2 	bl	800203c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8002498:	2200      	movs	r2, #0
 800249a:	2105      	movs	r1, #5
 800249c:	4839      	ldr	r0, [pc, #228]	; (8002584 <MX_USART1_UART_Init+0x174>)
 800249e:	f7ff fdef 	bl	8002080 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	2105      	movs	r1, #5
 80024a6:	4837      	ldr	r0, [pc, #220]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024a8:	f7ff fe0c 	bl	80020c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2105      	movs	r1, #5
 80024b0:	4834      	ldr	r0, [pc, #208]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024b2:	f7ff fe29 	bl	8002108 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2105      	movs	r1, #5
 80024ba:	4832      	ldr	r0, [pc, #200]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024bc:	f7ff fe46 	bl	800214c <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_USART_DMA_GetRegAddr(USART1));
 80024c0:	4831      	ldr	r0, [pc, #196]	; (8002588 <MX_USART1_UART_Init+0x178>)
 80024c2:	f7ff ff99 	bl	80023f8 <LL_USART_DMA_GetRegAddr>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	2105      	movs	r1, #5
 80024cc:	482d      	ldr	r0, [pc, #180]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024ce:	f7ff febb 	bl	8002248 <LL_DMA_SetPeriphAddress>


  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)G.Sbus.buffer);
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <MX_USART1_UART_Init+0x17c>)
 80024d4:	461a      	mov	r2, r3
 80024d6:	2105      	movs	r1, #5
 80024d8:	482a      	ldr	r0, [pc, #168]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024da:	f7ff fe9d 	bl	8002218 <LL_DMA_SetMemoryAddress>

  //LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, (uint32_t)G.Sbus.SBUS_FRAME_LEN );

  #define ARRAY_LEN(x)            (sizeof(x) / sizeof((x)[0]))
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, ARRAY_LEN(G.Sbus.buffer));
 80024de:	2219      	movs	r2, #25
 80024e0:	2105      	movs	r1, #5
 80024e2:	4828      	ldr	r0, [pc, #160]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024e4:	f7ff fe76 	bl	80021d4 <LL_DMA_SetDataLength>

  //LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 80024e8:	2105      	movs	r1, #5
 80024ea:	4826      	ldr	r0, [pc, #152]	; (8002584 <MX_USART1_UART_Init+0x174>)
 80024ec:	f7ff fec4 	bl	8002278 <LL_DMA_EnableIT_TC>

  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024f0:	f7ff fcfc 	bl	8001eec <__NVIC_GetPriorityGrouping>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fd4a 	bl	8001f94 <NVIC_EncodePriority>
 8002500:	4603      	mov	r3, r0
 8002502:	4619      	mov	r1, r3
 8002504:	200f      	movs	r0, #15
 8002506:	f7ff fd1b 	bl	8001f40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800250a:	200f      	movs	r0, #15
 800250c:	f7ff fcfc 	bl	8001f08 <__NVIC_EnableIRQ>


  // USART1 Init
  //

  USART_InitStruct.BaudRate = 100000;
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <MX_USART1_UART_Init+0x180>)
 8002512:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002520:	230c      	movs	r3, #12
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002528:	2300      	movs	r3, #0
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c

  LL_USART_Init(USART1, &USART_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	4815      	ldr	r0, [pc, #84]	; (8002588 <MX_USART1_UART_Init+0x178>)
 8002534:	f000 fc8a 	bl	8002e4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <MX_USART1_UART_Init+0x178>)
 800253a:	f7ff fefa 	bl	8002332 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableDMAReq_RX(USART1);
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_USART1_UART_Init+0x178>)
 8002540:	f7ff ff33 	bl	80023aa <LL_USART_EnableDMAReq_RX>


  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 1));
 8002544:	f7ff fcd2 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002548:	4603      	mov	r3, r0
 800254a:	2201      	movs	r2, #1
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fd20 	bl	8001f94 <NVIC_EncodePriority>
 8002554:	4603      	mov	r3, r0
 8002556:	4619      	mov	r1, r3
 8002558:	2025      	movs	r0, #37	; 0x25
 800255a:	f7ff fcf1 	bl	8001f40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800255e:	2025      	movs	r0, #37	; 0x25
 8002560:	f7ff fcd2 	bl	8001f08 <__NVIC_EnableIRQ>

  //LL_USART_EnableIT_IDLE(USART1);
  LL_USART_EnableIT_RXNE(USART1);
 8002564:	4808      	ldr	r0, [pc, #32]	; (8002588 <MX_USART1_UART_Init+0x178>)
 8002566:	f7ff fef9 	bl	800235c <LL_USART_EnableIT_RXNE>

  // Enable both
  //LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
  LL_USART_Enable(USART1);
 800256a:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_USART1_UART_Init+0x178>)
 800256c:	f7ff fed2 	bl	8002314 <LL_USART_Enable>


}
 8002570:	bf00      	nop
 8002572:	3730      	adds	r7, #48	; 0x30
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	04020002 	.word	0x04020002
 800257c:	40010800 	.word	0x40010800
 8002580:	04040004 	.word	0x04040004
 8002584:	40020000 	.word	0x40020000
 8002588:	40013800 	.word	0x40013800
 800258c:	200000ac 	.word	0x200000ac
 8002590:	000186a0 	.word	0x000186a0

08002594 <_Z41__static_initialization_and_destruction_0ii>:
  LL_USART_Enable(USART3);
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d110      	bne.n	80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80025ca:	4811      	ldr	r0, [pc, #68]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80025cc:	f7fe fd7e 	bl	80010cc <_ZN7GlobalsC1Ev>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025dc:	4293      	cmp	r3, r2
 80025de:	d110      	bne.n	8002602 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80025fe:	f7fe fe63 	bl	80012c8 <_ZN7GlobalsD1Ev>
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000010c 	.word	0x2000010c
 8002610:	20000084 	.word	0x20000084

08002614 <_GLOBAL__sub_I_MX_USART1_UART_Init>:
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
 8002618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff ffb9 	bl	8002594 <_Z41__static_initialization_and_destruction_0ii>
 8002622:	bd80      	pop	{r7, pc}

08002624 <_GLOBAL__sub_D_MX_USART1_UART_Init>:
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
 8002628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff ffb1 	bl	8002594 <_Z41__static_initialization_and_destruction_0ii>
 8002632:	bd80      	pop	{r7, pc}

08002634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002634:	f7ff fbe2 	bl	8001dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800263a:	490c      	ldr	r1, [pc, #48]	; (800266c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002650:	4c09      	ldr	r4, [pc, #36]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f000 fc8f 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002662:	f7fe fd67 	bl	8001134 <main>
  bx lr
 8002666:	4770      	bx	lr
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002670:	08003134 	.word	0x08003134
  ldr r2, =_sbss
 8002674:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002678:	20000118 	.word	0x20000118

0800267c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC1_2_IRQHandler>

0800267e <LL_GPIO_SetPinMode>:
{
 800267e:	b490      	push	{r4, r7}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0e1b      	lsrs	r3, r3, #24
 8002692:	4413      	add	r3, r2
 8002694:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	613b      	str	r3, [r7, #16]
  return result;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	210f      	movs	r1, #15
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	61bb      	str	r3, [r7, #24]
  return result;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	6023      	str	r3, [r4, #0]
}
 80026d8:	bf00      	nop
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc90      	pop	{r4, r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_GPIO_SetPinSpeed>:
{
 80026e2:	b490      	push	{r4, r7}
 80026e4:	b088      	sub	sp, #32
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0e1b      	lsrs	r3, r3, #24
 80026f6:	4413      	add	r3, r2
 80026f8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	613b      	str	r3, [r7, #16]
  return result;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	2103      	movs	r1, #3
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	61bb      	str	r3, [r7, #24]
  return result;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	6023      	str	r3, [r4, #0]
}
 800273c:	bf00      	nop
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bc90      	pop	{r4, r7}
 8002744:	4770      	bx	lr

08002746 <LL_GPIO_SetPinOutputType>:
{
 8002746:	b490      	push	{r4, r7}
 8002748:	b088      	sub	sp, #32
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	461a      	mov	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	0e1b      	lsrs	r3, r3, #24
 800275a:	4413      	add	r3, r2
 800275c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800275e:	6822      	ldr	r2, [r4, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	613b      	str	r3, [r7, #16]
  return result;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	2104      	movs	r1, #4
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	61bb      	str	r3, [r7, #24]
  return result;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	6023      	str	r3, [r4, #0]
}
 80027a0:	bf00      	nop
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc90      	pop	{r4, r7}
 80027a8:	4770      	bx	lr

080027aa <LL_GPIO_SetPinPull>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	613b      	str	r3, [r7, #16]
  return result;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4619      	mov	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	408b      	lsls	r3, r1
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	60da      	str	r2, [r3, #12]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b088      	sub	sp, #32
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	60fb      	str	r3, [r7, #12]
  return result;
 800280e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002818:	e044      	b.n	80028a4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800281a:	2201      	movs	r2, #1
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	409a      	lsls	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03a      	beq.n	800289e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b07      	cmp	r3, #7
 800282c:	d806      	bhi.n	800283c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800282e:	f240 1201 	movw	r2, #257	; 0x101
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e008      	b.n	800284e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3b08      	subs	r3, #8
 8002840:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800284c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d106      	bne.n	8002864 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	461a      	mov	r2, r3
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa3 	bl	80027aa <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff06 	bl	800267e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <LL_GPIO_Init+0x94>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d10d      	bne.n	800289e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	461a      	mov	r2, r3
 8002888:	69b9      	ldr	r1, [r7, #24]
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ff29 	bl	80026e2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	461a      	mov	r2, r3
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff54 	bl	8002746 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3301      	adds	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b4      	bne.n	800281a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <LL_I2C_Enable>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_I2C_Disable>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0201 	bic.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_I2C_SetOwnAddress1>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800290a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	430a      	orrs	r2, r1
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <LL_I2C_ConfigSpeed+0x120>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4939      	ldr	r1, [pc, #228]	; (8002a48 <LL_I2C_ConfigSpeed+0x124>)
 8002962:	428b      	cmp	r3, r1
 8002964:	d802      	bhi.n	800296c <LL_I2C_ConfigSpeed+0x48>
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3301      	adds	r3, #1
 800296a:	e009      	b.n	8002980 <LL_I2C_ConfigSpeed+0x5c>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4935      	ldr	r1, [pc, #212]	; (8002a4c <LL_I2C_ConfigSpeed+0x128>)
 8002978:	fba1 1303 	umull	r1, r3, r1, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	3301      	adds	r3, #1
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2f      	ldr	r2, [pc, #188]	; (8002a48 <LL_I2C_ConfigSpeed+0x124>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d939      	bls.n	8002a02 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d117      	bne.n	80029c4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029bc:	e01d      	b.n	80029fa <LL_I2C_ConfigSpeed+0xd6>
 80029be:	f248 0301 	movw	r3, #32769	; 0x8001
 80029c2:	e01a      	b.n	80029fa <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009a      	lsls	r2, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	009a      	lsls	r2, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80029f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f4:	e001      	b.n	80029fa <LL_I2C_ConfigSpeed+0xd6>
 80029f6:	f248 0301 	movw	r3, #32769	; 0x8001
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e011      	b.n	8002a26 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a10:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	e000      	b.n	8002a24 <LL_I2C_ConfigSpeed+0x100>
 8002a22:	2304      	movs	r3, #4
 8002a24:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	61da      	str	r2, [r3, #28]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	000186a0 	.word	0x000186a0
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 021a 	bic.w	r2, r3, #26
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ff18 	bl	80028d8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f87b 	bl	8002ba8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002ab2:	6939      	ldr	r1, [r7, #16]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff31 	bl	8002924 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68d9      	ldr	r1, [r3, #12]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	461a      	mov	r2, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ff12 	bl	80028f6 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffb9 	bl	8002a50 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff feeb 	bl	80028ba <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffc2 	bl	8002a74 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <LL_RCC_GetSysClkSource>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <LL_RCC_GetSysClkSource+0x14>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000

08002b14 <LL_RCC_GetAHBPrescaler>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <LL_RCC_GetAHBPrescaler+0x14>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40021000 	.word	0x40021000

08002b2c <LL_RCC_GetAPB1Prescaler>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40021000 	.word	0x40021000

08002b44 <LL_RCC_GetAPB2Prescaler>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40021000 	.word	0x40021000

08002b5c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <LL_RCC_PLL_GetMainSource+0x14>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000

08002b74 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000

08002b8c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <LL_RCC_PLL_GetPrediv+0x18>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	0c5b      	lsrs	r3, r3, #17
 8002b96:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002bb0:	f000 f820 	bl	8002bf4 <RCC_GetSystemClockFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f83e 	bl	8002c40 <RCC_GetHCLKClockFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f84c 	bl	8002c6c <RCC_GetPCLK1ClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f858 	bl	8002c94 <RCC_GetPCLK2ClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002bfe:	f7ff ff7d 	bl	8002afc <LL_RCC_GetSysClkSource>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d00c      	beq.n	8002c22 <RCC_GetSystemClockFreq+0x2e>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d80e      	bhi.n	8002c2a <RCC_GetSystemClockFreq+0x36>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <RCC_GetSystemClockFreq+0x22>
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d003      	beq.n	8002c1c <RCC_GetSystemClockFreq+0x28>
 8002c14:	e009      	b.n	8002c2a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <RCC_GetSystemClockFreq+0x48>)
 8002c18:	607b      	str	r3, [r7, #4]
      break;
 8002c1a:	e009      	b.n	8002c30 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <RCC_GetSystemClockFreq+0x48>)
 8002c1e:	607b      	str	r3, [r7, #4]
      break;
 8002c20:	e006      	b.n	8002c30 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002c22:	f000 f84b 	bl	8002cbc <RCC_PLL_GetFreqDomain_SYS>
 8002c26:	6078      	str	r0, [r7, #4]
      break;
 8002c28:	e002      	b.n	8002c30 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <RCC_GetSystemClockFreq+0x48>)
 8002c2c:	607b      	str	r3, [r7, #4]
      break;
 8002c2e:	bf00      	nop
  }

  return frequency;
 8002c30:	687b      	ldr	r3, [r7, #4]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c48:	f7ff ff64 	bl	8002b14 <LL_RCC_GetAHBPrescaler>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <RCC_GetHCLKClockFreq+0x28>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	40d3      	lsrs	r3, r2
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	080030f4 	.word	0x080030f4

08002c6c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c74:	f7ff ff5a 	bl	8002b2c <LL_RCC_GetAPB1Prescaler>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <RCC_GetPCLK1ClockFreq+0x24>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	461a      	mov	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	40d3      	lsrs	r3, r2
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	08003104 	.word	0x08003104

08002c94 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002c9c:	f7ff ff52 	bl	8002b44 <LL_RCC_GetAPB2Prescaler>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	0adb      	lsrs	r3, r3, #11
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <RCC_GetPCLK2ClockFreq+0x24>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	40d3      	lsrs	r3, r2
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	08003104 	.word	0x08003104

08002cbc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002cca:	f7ff ff47 	bl	8002b5c <LL_RCC_PLL_GetMainSource>
 8002cce:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cdc:	d003      	beq.n	8002ce6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002cde:	e00b      	b.n	8002cf8 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002ce2:	607b      	str	r3, [r7, #4]
      break;
 8002ce4:	e00b      	b.n	8002cfe <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002ce6:	f7ff ff51 	bl	8002b8c <LL_RCC_PLL_GetPrediv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	607b      	str	r3, [r7, #4]
      break;
 8002cf6:	e002      	b.n	8002cfe <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002cfa:	607b      	str	r3, [r7, #4]
      break;
 8002cfc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002cfe:	f7ff ff39 	bl	8002b74 <LL_RCC_PLL_GetMultiplicator>
 8002d02:	4603      	mov	r3, r0
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	3302      	adds	r3, #2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <LL_USART_IsEnabled>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <LL_USART_SetStopBitsLength>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_USART_SetHWFlowCtrl>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	615a      	str	r2, [r3, #20]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <LL_USART_SetBaudRate>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009a      	lsls	r2, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <LL_USART_SetBaudRate+0xb8>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	b299      	uxth	r1, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009a      	lsls	r2, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <LL_USART_SetBaudRate+0xb8>)
 8002dd4:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2064      	movs	r0, #100	; 0x64
 8002ddc:	fb00 f303 	mul.w	r3, r0, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <LL_USART_SetBaudRate+0xb8>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	440b      	add	r3, r1
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <LL_USART_SetBaudRate+0xb8>)
 8002e10:	fba3 0302 	umull	r0, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2064      	movs	r0, #100	; 0x64
 8002e18:	fb00 f303 	mul.w	r3, r0, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <LL_USART_SetBaudRate+0xb8>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	440b      	add	r3, r1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	51eb851f 	.word	0x51eb851f

08002e4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff5e 	bl	8002d20 <LL_USART_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d145      	bne.n	8002ef6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e72:	f023 030c 	bic.w	r3, r3, #12
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6851      	ldr	r1, [r2, #4]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	6912      	ldr	r2, [r2, #16]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff57 	bl	8002d46 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff63 	bl	8002d6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fe7d 	bl	8002ba8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <LL_USART_Init+0xb4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d102      	bne.n	8002ebc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e00c      	b.n	8002ed6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <LL_USART_Init+0xb8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d102      	bne.n	8002eca <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e005      	b.n	8002ed6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <LL_USART_Init+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff4d 	bl	8002d90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40004400 	.word	0x40004400
 8002f08:	40004800 	.word	0x40004800

08002f0c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <LL_InitTick+0x30>)
 8002f20:	3b01      	subs	r3, #1
 8002f22:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <LL_InitTick+0x30>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <LL_InitTick+0x30>)
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002f48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ffdd 	bl	8002f0c <LL_InitTick>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <LL_SetSystemCoreClock+0x18>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000000 	.word	0x20000000

08002f78 <_ZdlPvj>:
 8002f78:	f000 b800 	b.w	8002f7c <_ZdlPv>

08002f7c <_ZdlPv>:
 8002f7c:	f000 b824 	b.w	8002fc8 <free>

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2600      	movs	r6, #0
 8002f84:	4d0c      	ldr	r5, [pc, #48]	; (8002fb8 <__libc_init_array+0x38>)
 8002f86:	4c0d      	ldr	r4, [pc, #52]	; (8002fbc <__libc_init_array+0x3c>)
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	f000 f878 	bl	8003084 <_init>
 8002f94:	2600      	movs	r6, #0
 8002f96:	4d0a      	ldr	r5, [pc, #40]	; (8002fc0 <__libc_init_array+0x40>)
 8002f98:	4c0a      	ldr	r4, [pc, #40]	; (8002fc4 <__libc_init_array+0x44>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08003114 	.word	0x08003114
 8002fbc:	08003114 	.word	0x08003114
 8002fc0:	08003114 	.word	0x08003114
 8002fc4:	08003124 	.word	0x08003124

08002fc8 <free>:
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <free+0xc>)
 8002fca:	4601      	mov	r1, r0
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	f000 b803 	b.w	8002fd8 <_free_r>
 8002fd2:	bf00      	nop
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <_free_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4605      	mov	r5, r0
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	d040      	beq.n	8003062 <_free_r+0x8a>
 8002fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe4:	1f0c      	subs	r4, r1, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfb8      	it	lt
 8002fea:	18e4      	addlt	r4, r4, r3
 8002fec:	f000 f83c 	bl	8003068 <__malloc_lock>
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <_free_r+0x8c>)
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	b933      	cbnz	r3, 8003004 <_free_r+0x2c>
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	6014      	str	r4, [r2, #0]
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003000:	f000 b838 	b.w	8003074 <__malloc_unlock>
 8003004:	42a3      	cmp	r3, r4
 8003006:	d908      	bls.n	800301a <_free_r+0x42>
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	1821      	adds	r1, r4, r0
 800300c:	428b      	cmp	r3, r1
 800300e:	bf01      	itttt	eq
 8003010:	6819      	ldreq	r1, [r3, #0]
 8003012:	685b      	ldreq	r3, [r3, #4]
 8003014:	1809      	addeq	r1, r1, r0
 8003016:	6021      	streq	r1, [r4, #0]
 8003018:	e7ed      	b.n	8002ff6 <_free_r+0x1e>
 800301a:	461a      	mov	r2, r3
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b10b      	cbz	r3, 8003024 <_free_r+0x4c>
 8003020:	42a3      	cmp	r3, r4
 8003022:	d9fa      	bls.n	800301a <_free_r+0x42>
 8003024:	6811      	ldr	r1, [r2, #0]
 8003026:	1850      	adds	r0, r2, r1
 8003028:	42a0      	cmp	r0, r4
 800302a:	d10b      	bne.n	8003044 <_free_r+0x6c>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	4401      	add	r1, r0
 8003030:	1850      	adds	r0, r2, r1
 8003032:	4283      	cmp	r3, r0
 8003034:	6011      	str	r1, [r2, #0]
 8003036:	d1e0      	bne.n	8002ffa <_free_r+0x22>
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4401      	add	r1, r0
 800303e:	6011      	str	r1, [r2, #0]
 8003040:	6053      	str	r3, [r2, #4]
 8003042:	e7da      	b.n	8002ffa <_free_r+0x22>
 8003044:	d902      	bls.n	800304c <_free_r+0x74>
 8003046:	230c      	movs	r3, #12
 8003048:	602b      	str	r3, [r5, #0]
 800304a:	e7d6      	b.n	8002ffa <_free_r+0x22>
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	1821      	adds	r1, r4, r0
 8003050:	428b      	cmp	r3, r1
 8003052:	bf01      	itttt	eq
 8003054:	6819      	ldreq	r1, [r3, #0]
 8003056:	685b      	ldreq	r3, [r3, #4]
 8003058:	1809      	addeq	r1, r1, r0
 800305a:	6021      	streq	r1, [r4, #0]
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	6054      	str	r4, [r2, #4]
 8003060:	e7cb      	b.n	8002ffa <_free_r+0x22>
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000110 	.word	0x20000110

08003068 <__malloc_lock>:
 8003068:	4801      	ldr	r0, [pc, #4]	; (8003070 <__malloc_lock+0x8>)
 800306a:	f000 b809 	b.w	8003080 <__retarget_lock_acquire_recursive>
 800306e:	bf00      	nop
 8003070:	20000114 	.word	0x20000114

08003074 <__malloc_unlock>:
 8003074:	4801      	ldr	r0, [pc, #4]	; (800307c <__malloc_unlock+0x8>)
 8003076:	f000 b804 	b.w	8003082 <__retarget_lock_release_recursive>
 800307a:	bf00      	nop
 800307c:	20000114 	.word	0x20000114

08003080 <__retarget_lock_acquire_recursive>:
 8003080:	4770      	bx	lr

08003082 <__retarget_lock_release_recursive>:
 8003082:	4770      	bx	lr

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
